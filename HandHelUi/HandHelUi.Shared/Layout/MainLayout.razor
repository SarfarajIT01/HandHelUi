@* @using HandHelUi.Shared.Models
@using HandHelUi.Shared.Pages.Components
@using HandHelUi.Shared.Services
@using HandHeldUi.Shared.Services
@inherits LayoutComponentBase
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject CartState CartState
@inject TableSelectionService TableSelectionService

<link href="_content/HandHelUi.Shared/css/mainlayout.css" rel="stylesheet" />
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" rel="stylesheet">


<div class="app-container @(sidebarOpen ? "sidebar-open" : "")">
    <Header ToggleSidebar="ToggleSidebar" OnSearch="HandleSearch" />
    <Sidebar @bind-IsOpen="sidebarOpen"
             RestaurantName="@restaurantName"
             IpAddress="@ipAddress" />
    <main class="app-main">
        @Body
        <div class="avatar avatar-80 rounded-circle shadow-danger shadow-sm p-1 mb-3" style="display:none">
            <div id="circlesaving"></div>
        </div>
        <div class="avatar avatar-80 rounded-circle shadow-warning shadow-sm p-1 mb-3" style="display:none">
            <div id="circlesaving2"></div>
        </div>
    </main>


    <!-- Table Popup component goes here -->
    <QuickActions IsOpen="@ShowQuickAction"
                  IsOpenChanged="OnActionPopupChanged" />


    <Footer CartCount="@cartCount"
            tableNo="@SelectedTable?.RmscCod"
            OnHomeClick="HomePage"
            OnTableClick="LoadTableData"
            OnOrderTypeClick="ShowOrderTypeModal"
            OnMenuClick="ShowMenuModal"
            OnCoverClick="ShowCoverModal"
            OnCartClick="ShowCart"
            OnClearCartClick="ClearCart" />
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.bundle.min.js"></script>

@code {
    private bool sidebarOpen = false;
    private string restaurantName = "Restaurant Name";
    private string ipAddress = "192.168.1.1";
    private int cartCount = 0;
    private string? tableNo;
    private string searchTerm = "";
    private string outletId = "";
    private string posCode = "";
    private bool _isInitialized = false;
    // private bool ShowTablePopup = false;
    private bool ShowQuickAction = false;
    [Parameter] public PfbRmscMst? SelectedTable { get; set; }


    protected override async Task OnInitializedAsync()
    {
        CartState.OnCartChanged += UpdateCartCount;
        UpdateCartCount();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            outletId = await JS.InvokeAsync<string>("localStorage.getItem", "outletId") ?? "001";
            posCode = await JS.InvokeAsync<string>("localStorage.getItem", "posCode") ?? "001";
            _isInitialized = true;
            StateHasChanged();
        }
    }

    private void ToggleSidebar()
    {
        sidebarOpen = !sidebarOpen;
    }

    private async Task HandleSearch(string term)
    {
        searchTerm = term;
        if (_isInitialized)
        {
            outletId = await JS.InvokeAsync<string>("localStorage.getItem", "outletId") ?? "001";
            posCode = await JS.InvokeAsync<string>("localStorage.getItem", "posCode") ?? "001";
        }
        Navigation.NavigateTo($"/menu/{outletId}?search={searchTerm}&posCode={posCode}");
    }

    private string GetSearchTerm()
    {
        return searchTerm;
    }

    private void ClearCart()
    {
        CartState.ClearCart();
    }

    private void HomePage()
    {
        Navigation.NavigateTo($"/menu/{outletId}?posCode={posCode}");
    }

   


    // private void OnTablePopupChanged(bool value) => ShowTablePopup = value;
    private void OnActionPopupChanged(bool value) => ShowQuickAction = value;


    private void ShowOrderTypeModal()
    {
        // Show order type modal logic
    }

    private void ShowMenuModal()
    {
        ShowQuickAction = true;
    }

    private void ShowCoverModal()
    {
        // Show cover modal logic
    }

    private void LoadTableData()
    {
        TableSelectionService.TriggerTableSelected();
    }

    // private void GetTableNo()
    // {
    //     tableNo = TableSelectionService?.SelectedTable?.RmscCod;

    // }

    private void ShowCart()
    {
        CartState.TriggerToggleCart();
    }

    

    private void UpdateCartCount()
    {
        cartCount = CartState.CartItems.Sum(i => i.Qty);
        StateHasChanged();
    }

    public void Dispose()
    {
        CartState.OnCartChanged -= UpdateCartCount;
    }
} *@



@using HandHelUi.Shared.Models
@using HandHelUi.Shared.Pages.Components
@using HandHelUi.Shared.Services
@using HandHeldUi.Shared.Services
@inherits LayoutComponentBase
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject CartState CartState
@inject TableSelectionService TableSelectionService
<link href="_content/HandHelUi.Shared/css/mainlayout.css" rel="stylesheet" />
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" rel="stylesheet">
<div class="app-container @(sidebarOpen ? "sidebar-open" : "")">
    <Header ToggleSidebar="ToggleSidebar" OnSearch="HandleSearch" />
    <Sidebar @bind-IsOpen="sidebarOpen"
             RestaurantName="@restaurantName"
             IpAddress="@ipAddress" />
    <main class="app-main">
        @Body
        <div class="avatar avatar-80 rounded-circle shadow-danger shadow-sm p-1 mb-3" style="display:none">
            <div id="circlesaving"></div>
        </div>
        <div class="avatar avatar-80 rounded-circle shadow-warning shadow-sm p-1 mb-3" style="display:none">
            <div id="circlesaving2"></div>
        </div>
    </main>
    <!-- Table Popup component goes here -->
    @* <TableSelection IsOpen="@ShowTableSelection" 
                    IsOpenChanged="OnTableSelectionChanged"
                    OutletId="@outletId"
                    BillGenrate="BillGen"
                    OnTableSelected="HandleTableSelected" /> *@

    <QuickActions IsOpen="@ShowQuickAction"
                  IsOpenChanged="OnActionPopupChanged"
                  OnActionSelected="HandleActionSelected" /> <!-- NEW: Bind the new callback -->

    <Footer CartCount="@cartCount"
            tableNo="@tableNo"
            OnHomeClick="HomePage"
            OnTableClick="LoadTableData"
            OnOrderTypeClick="ShowOrderTypeModal"
            OnMenuClick="ShowMenuModal"
            OnCoverClick="ShowCoverModal"
            OnCartClick="ShowCart"
            OnClearCartClick="ClearCart" />
</div>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.bundle.min.js"></script>
@code {
    private bool sidebarOpen = false;
    private string restaurantName = "Restaurant Name";
    private string ipAddress = "192.168.1.1";
    private int cartCount = 0;
    private string? tableNo;
    [Parameter] public string? TableNumber { get; set; }
    private string searchTerm = "";
    private string outletId = "";
    private string posCode = "";
    private bool _isInitialized = false;
    private bool ShowQuickAction = false;
    private bool ShowTableSelection = false; // NEW: For TableSelection visibility

    protected override async Task OnInitializedAsync()
    {
        CartState.OnCartChanged += UpdateCartCount;
        TableSelectionService.OnTableSelected += UpdateTableNo; 
        UpdateCartCount();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            outletId = await JS.InvokeAsync<string>("localStorage.getItem", "outletId");
            posCode = await JS.InvokeAsync<string>("localStorage.getItem", "posCode");
            _isInitialized = true;
            StateHasChanged();
        }
    }

    private void ToggleSidebar()
    {
        sidebarOpen = !sidebarOpen;
    }

    private async Task HandleSearch(string term)
    {
        searchTerm = term;
        if (_isInitialized)
        {
            outletId = await JS.InvokeAsync<string>("localStorage.getItem", "outletId");
            posCode = await JS.InvokeAsync<string>("localStorage.getItem", "posCode");
        }
        Navigation.NavigateTo($"/menu/{outletId}?search={searchTerm}&posCode={posCode}");
    }

    private string GetSearchTerm()
    {
        return searchTerm;
    }

    private void ClearCart()
    {
        CartState.ClearCart();
    }

    private void HomePage()
    {
        Navigation.NavigateTo($"/menu/{outletId}?posCode={posCode}", forceLoad: true);
    }

    private void OnActionPopupChanged(bool value) => ShowQuickAction = value;

    private async Task HandleActionSelected(string action) // NEW: Handle action from QuickActions
    {
        Console.WriteLine($"Selected action: {action}");
        if (action == "Bill Generate")
        {
            ShowTableSelection = true; // Open TableSelection for Bill Generate
        }
        // Add more if-else for other actions if needed
    }

    private void OnTableSelectionChanged(bool value) => ShowTableSelection = value; // NEW: Handle TableSelection close


// @using System.Text.Json

    private async Task HandleTableSelected(PfbRmscMst selectedTable) // NEW: Handle selected table
    {
        Navigation.NavigateTo($"/bill?tableNo={selectedTable.RmscCod}");
        ShowTableSelection = false;
    }

    private void ShowOrderTypeModal()
    {
        // Show order type modal logic
    }

    private void ShowMenuModal()
    {
        ShowQuickAction = true;
    }

    private void ShowCoverModal()
    {
        // Show cover modal logic
    }

    private void LoadTableData()
    {
        TableSelectionService.TriggerTableSelected();
    }

    private void UpdateTableNo()
    {
        tableNo = TableSelectionService?.SelectedTable?.RmscCod;
        StateHasChanged();
    }

    private void ShowCart()
    {
        CartState.TriggerToggleCart();
    }

    private void UpdateCartCount()
    {
        cartCount = CartState.CartItems.Sum(i => i.Qty);
        StateHasChanged();
    }

    public void Dispose()
    {
        CartState.OnCartChanged -= UpdateCartCount;
        TableSelectionService.OnTableSelected -= UpdateTableNo;
    }
}