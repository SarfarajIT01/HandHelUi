@* @page "/additional"
@inject CartState CartState
@using HandHeldUi.Shared.Services
@using HandHelUi.Shared.Models

<div class="cart-overlay @(IsOpen ? "open" : "")">
    <div class="cart-container shadow-lg">
        <!-- Header -->
        <div class="cart-header d-flex justify-content-between align-items-center">
            <h5 class="fw-bold mb-0">ITEMS</h5>
            <img src="_content/HandHelUi.Shared/assets/img/csat_logo.png" style="width: 70px;" alt="Logo" />
            <button class="btn btn-close-modern" @onclick="Toggle" title="Close Cart">
                <i class="bi bi-x-lg"></i>
            </button>
        </div>

        <!-- Order Details Panel (absolute, overlays cart-body) -->
        <div class="order-details-panel @(ShowOrderDetails ? "show" : "")" role="region" aria-hidden="@(!ShowOrderDetails)">
            <div class="order-details-inner p-3">
                <div class="d-flex justify-content-between align-items-start mb-2">
                    <h6 class="mb-0">Order Details</h6>
                    <button class="btn btn-sm btn-close-panel" @onclick="ToggleOrderDetails" aria-label="Close details">
                        <i class="bi bi-x"></i>
                    </button>
                </div>

                <div class="od-row d-flex justify-content-between">
                    <small class="label">Steward</small>
                    <small class="value">@OrderSteward</small>
                </div>
                <div class="od-row d-flex justify-content-between">
                    <small class="label">Cover</small>
                    <small class="value">@OrderCover</small>
                </div>
                <div class="od-row d-flex justify-content-between">
                    <small class="label">Order Type</small>
                    <small class="value">@OrderType</small>
                </div>
                <div class="od-row d-flex justify-content-between">
                    <small class="label">Guest</small>
                    <small class="value">@OrderGuest</small>
                </div>
                <div class="od-row d-flex justify-content-between">
                    <small class="label">Order Remark</small>
                    <small class="value">@OrderRemark</small>
                </div>
            </div>
        </div>

        <!-- Body -->
        <div class="cart-body">
            @if (CartItems.Any())
            {
                @foreach (var item in CartItems)
                {
                    <div class="cart-item d-flex justify-content-between align-items-center p-3 mb-3 rounded shadow-sm">
                        <div>
                            <h6 class="fw-semibold mb-1">@item.Name</h6>
                            <small class="text-muted">₹ @item.Price</small>
                        </div>
                        <div class="d-flex align-items-center gap-2">
                            <button class="qty-btn minus" @onclick="() => OnDecreaseQty.InvokeAsync(item)">
                                <i class="bi bi-dash-lg"></i>
                            </button>
                            <span class="fw-bold fs-6">@item.Qty</span>
                            <button class="qty-btn plus" @onclick="() => OnIncreaseQty.InvokeAsync(item)">
                                <i class="bi bi-plus-lg"></i>
                            </button>
                        </div>
                    </div>

                    @if (item.CartSubItem.Any())
                    {
                        <div class="ms-3 mb-2">
                            <small class="text-secondary d-block mb-1">Customizations:</small>
                            @foreach (var subItem in item.CartSubItem)
                            {
                                <div class="d-flex justify-content-between align-items-center small border-start ps-2">
                                    <span>@subItem.SubItemName</span>
                                    <span class="text-danger">₹ @subItem.SubItemRates</span>
                                </div>
                            }
                        </div>
                    }
                }
            }
            else
            {
                <div class="text-center text-muted mt-5">
                    <i class="bi bi-bag-x fs-1 text-secondary"></i>
                    <p>Your cart is empty</p>
                </div>
            }
        </div>

        <!-- Footer -->
        <div class="cart-footer p-3 border-top">
            <!-- Toggle placed just above the HR (as requested) -->
            <div class="d-flex justify-content-between align-items-center mb-2">
                <div></div>
                <button class="btn btn-sm btn-details-toggle" @onclick="ToggleOrderDetails" aria-expanded="@ShowOrderDetails">
                    Order Details
                    <i class="bi @(ShowOrderDetails ? "bi-chevron-down" : "bi-chevron-up") ms-2"></i>
                </button>
            </div>

            <hr class="my-2" />

            <!-- Item / Order summary -->
            <div class="d-flex justify-content-between mb-2">
                <span>Subtotal</span> <strong>₹ 3250</strong>
            </div>
            <div class="d-flex justify-content-between mb-2">
                <span>Tax</span> <strong>₹ 50</strong>
            </div>
            <div class="d-flex justify-content-between mb-2">
                <span>Discount</span> <strong>₹ 50</strong>
            </div>

            <hr class="my-2" />

            <div class="d-flex justify-content-between mb-3">
                <h5 class="fw-bold">Total</h5>
                <h5 class="fw-bold text-success">
                    ₹ @(CartItems.Sum(x => x.Price * x.Qty) + CartItems.SelectMany(x => x.CartSubItem).Sum(x => x.SubItemRates ?? 0))
                </h5>
            </div>
           
            <button class="btn btn-modern-gradient w-100 py-2 fs-6" @onclick="CheckoutClicked" disabled="@IsCheckoutDisabled" title="@(IsCheckoutDisabled? GetDisableReason() : "")">
                Proceed to Checkout
            </button>
            <button class="btn btn-gradient w-100" @onclick="CheckoutClicked" disabled="@IsCheckoutDisabled" title="@(IsCheckoutDisabled? GetDisableReason() : "")"> Proceed to Checkout </button>
        </div>
    </div>
</div>

@code {


    // ... keep your existing HasSubItemMinQtyViolation, GetDisableReason, CheckoutClicked, RemoveSubItem methods unchanged ...
    // (You can paste the methods you already had here — left out for brevity)
}


@code {
    [Parameter] public bool IsOpen { get; set; } = true;
    [Parameter] public EventCallback Toggle { get; set; }
    [Parameter] public List<CartItem> CartItems { get; set; } = new();
    [Parameter] public EventCallback<CartItem> OnIncreaseQty { get; set; }
    [Parameter] public EventCallback<CartItem> OnDecreaseQty { get; set; }
    [Parameter] public EventCallback OnCheckout { get; set; }
    [Parameter] public List<MenuItem> MenuItems { get; set; } = new();

    private bool ShowOrderDetails { get; set; } = false;

    // static display values (non-editable as requested)
    private string OrderSteward { get; set; } = "Alok";
    private string OrderCover { get; set; } = "05";
    private string OrderType { get; set; } = "Complementary";
    private string OrderGuest { get; set; } = "Sarfaraj";
    private string OrderRemark { get; set; } = "Special";

    private bool IsCheckoutDisabled => !CartItems.Any() || HasSubItemMinQtyViolation();

    private void ToggleOrderDetails()
    {
        ShowOrderDetails = !ShowOrderDetails;
    }

    private bool HasSubItemMinQtyViolation()
    {
        foreach (var cartItem in CartItems)
        {
            // Find corresponding MenuItem
            var menuItem = MenuItems.FirstOrDefault(mi => mi.ItemName == cartItem.Name && mi.ItemCode == cartItem.ItemCode);
            if (menuItem == null) continue;

            // Check for CommonAddons first
            if (menuItem.CommonAddons?.Any() == true)
            {
                foreach (var group in menuItem.CommonAddons)
                {
                   
                    var groupSubItems = group.ToList();

                    var groupMinQty = groupSubItems.Min(sub => sub.SubMinQty ?? 0);
                    if (groupMinQty > 0)
                    {
                        
                        var selectedCountInGroup = cartItem.CartSubItem
                            .Count(csi => groupSubItems.Any(sub => sub.SubItemName == csi.SubItemName));

                        if (selectedCountInGroup < groupMinQty)
                        {
                            return true; 
                        }
                    }
                }
            }
            // Else check for SubItems
            else if (menuItem.SubItems?.Any() == true)
            {
                foreach (var group in menuItem.SubItems)
                {
                    var groupSubItems = group.ToList();
                    var groupMinQty = groupSubItems.Min(sub => sub.SubMinQty ?? 0);

                    if (groupMinQty > 0)
                    {
                        var selectedCountInGroup = cartItem.CartSubItem
                            .Count(csi => groupSubItems.Any(sub => sub.SubItemName == csi.SubItemName));

                        if (selectedCountInGroup < groupMinQty)
                        {
                            return true; 
                        }
                    }
                }
            }
        }

        return false; 
    }

    private string GetDisableReason()
    {
        if (!CartItems.Any())
            return "Cart is empty";

        foreach (var cartItem in CartItems)
        {
            var menuItem = MenuItems.FirstOrDefault(mi => mi.ItemName == cartItem.Name && mi.ItemCode == cartItem.ItemCode);
            if (menuItem == null) continue;

            // Check CommonAddons group-wise
            if (menuItem.CommonAddons?.Any() == true)
            {
                int groupIndex = 1;
                foreach (var group in menuItem.CommonAddons)
                {
                    var groupSubItems = group.ToList();
                    var groupMinQty = groupSubItems.Min(sub => sub.SubMinQty ?? 0);
                    var groupName = groupSubItems.FirstOrDefault()?.SubGrpName ?? $"Group {groupIndex}";

                    if (groupMinQty > 0)
                    {
                        var selectedCountInGroup = cartItem.CartSubItem
                            .Count(csi => groupSubItems.Any(sub => sub.SubItemName == csi.SubItemName));

                        if (selectedCountInGroup < groupMinQty)
                        {
                            return $"Please add at least {groupMinQty} customization(s) for {cartItem.Name} in '{groupName}'";
                        }
                    }
                    groupIndex++;
                }
            }
            // Check SubItems group-wise
            else if (menuItem.SubItems?.Any() == true)
            {
                int groupIndex = 1;
                foreach (var group in menuItem.SubItems)
                {
                    var groupSubItems = group.ToList();
                    var groupMinQty = groupSubItems.Min(sub => sub.SubMinQty ?? 0);
                    var groupName = groupSubItems.FirstOrDefault()?.SubGrpName ?? $"Group {groupIndex}";


                    if (groupMinQty > 0)
                    {
                        var selectedCountInGroup = cartItem.CartSubItem
                            .Count(csi => groupSubItems.Any(sub => sub.SubItemName == csi.SubItemName));

                        if (selectedCountInGroup < groupMinQty)
                        {
                            return $"Please add at least {groupMinQty} customization(s) for {cartItem.Name} in '{groupName}'";
                        }
                    }
                    groupIndex++;
                }
            }
        }

        return "";
    }


    private async Task CheckoutClicked()
    {
        if (OnCheckout.HasDelegate)
        {
            await OnCheckout.InvokeAsync();
        }
    }

    private void RemoveSubItem(CartItem parentItem, CartSubItem subItem)
    {
        CartState.DecreaseItemQty(parentItem.Name, subItem.SubItemName);
    }
}
<style>
    /* ========== CART OVERLAY ========== */
    .cart-overlay {
        position: fixed;
        top: 0;
        right: -100%;
        width: 400px;
        height: 100vh;
        background: rgba(255, 255, 255, 0.98);
        backdrop-filter: blur(8px);
        transition: right 0.4s ease-in-out;
        z-index: 1050;
        box-shadow: -4px 0 25px rgba(0, 0, 0, 0.2);
    }

        .cart-overlay.open {
            right: 0;
        }

    /* ========== CART CONTAINER ========== */
    .cart-container {
        display: flex;
        flex-direction: column;
        height: 100%;
        position: relative;
    }

    /* ========== HEADER ========== */
    .cart-header {
        background: linear-gradient(135deg, #6a11cb, #2575fc);
        color: #fff;
        padding: 14px 16px;
        border-top-left-radius: 10px;
        border-top-right-radius: 10px;
    }

    /* Stylish close button */
    .btn-close-modern {
        background: rgba(255, 255, 255, 0.2);
        color: white;
        border: none;
        border-radius: 50%;
        width: 34px;
        height: 34px;
        font-size: 0.9rem;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.25s ease;
    }

        .btn-close-modern:hover {
            background: rgba(255, 255, 255, 0.4);
            transform: rotate(90deg);
        }

    /* ========== CART BODY ========== */
    .cart-body {
        flex: 1;
        overflow-y: auto;
        padding: 16px;
        background: #fafafa;
    }

        /* Hide scrollbar but keep scroll functionality */
        .cart-body::-webkit-scrollbar {
            width: 0;
            background: transparent;
        }

    .cart-body {
        scrollbar-width: none;
    }

    /* Cart Item Styling */
    .cart-item {
        background: white;
        border-radius: 12px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
        transition: all 0.25s ease;
    }

        .cart-item:hover {
            transform: scale(1.02);
        }

    /* ========== QTY BUTTONS ========== */
    .qty-btn {
        width: 36px;
        height: 36px;
        border: none;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1rem;
        font-weight: bold;
        color: #fff;
        transition: all 0.25s ease;
        cursor: pointer;
    }

        .qty-btn.plus {
            background: linear-gradient(135deg, #28a745, #56d364);
            box-shadow: 0 2px 8px rgba(40, 167, 69, 0.3);
        }

        .qty-btn.minus {
            background: linear-gradient(135deg, #dc3545, #ff6b81);
            box-shadow: 0 2px 8px rgba(220, 53, 69, 0.3);
        }

        .qty-btn:hover {
            transform: scale(1.15);
        }

    /* ========== ORDER DETAILS PANEL (SLIDE DOWN) ========== */
    .order-details-panel {
        position: absolute;
        left: 16px;
        right: 16px;
        top: 74px; /* adjust to match your header height */
        max-height: 55vh;
        overflow: auto;
        transform: translateY(-20px) scale(0.98);
        opacity: 0;
        pointer-events: none;
        transition: transform 0.35s cubic-bezier(.22,.9,.13,1), opacity 0.35s ease;
        z-index: 1060;
        border-radius: 12px;
        box-shadow: 0 12px 30px rgba(11, 20, 40, 0.18);
        background: linear-gradient(180deg, rgba(255, 255, 255, 0.98), #ffffff);
    }

        /* Slide down animation when open */
        .order-details-panel.show {
            transform: translateY(0) scale(1);
            opacity: 1;
            pointer-events: auto;
        }

    /* Inner padding */
    .order-details-inner {
        padding: 14px;
    }

    /* Close button inside order panel */
    .btn-close-panel {
        background: transparent;
        border: none;
        color: #333;
        font-size: 1.1rem;
        transition: color 0.2s ease;
    }

        .btn-close-panel:hover {
            color: #000;
        }

    /* Each order detail line */
    .od-row {
        padding: 8px 0;
        border-bottom: 1px dashed rgba(0, 0, 0, 0.06);
    }

        .od-row .label {
            color: #6b7280;
            font-size: 0.85rem;
        }

        .od-row .value {
            color: #111827;
            font-weight: 600;
        }

    /* ========== TOGGLE BUTTON ABOVE HR ========== */
    .btn-details-toggle {
        background: #fff;
        border: 1px solid rgba(0, 0, 0, 0.08);
        border-radius: 25px;
        padding: 6px 14px;
        font-size: 0.9rem;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
        transition: all 0.3s ease;
    }

        .btn-details-toggle:hover {
            background: #f3f4f6;
        }

    /* ========== FOOTER ========== */
    .cart-footer {
        background: #fff;
        border-top: 1px solid rgba(0, 0, 0, 0.1);
        border-bottom-left-radius: 10px;
        border-bottom-right-radius: 10px;
    }

    /* Gradient Checkout Button */
    .btn-modern-gradient {
        background: linear-gradient(135deg, #ff6a00, #ee0979);
        border: none;
        color: white;
        border-radius: 10px;
        font-weight: 600;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

        .btn-modern-gradient:hover {
            transform: scale(1.02);
            box-shadow: 0 4px 14px rgba(238, 9, 121, 0.4);
        }

    /* ========== EMPTY STATE ========== */
    .text-muted i {
        opacity: 0.5;
    }

    /* ========== RESPONSIVE ========== */
    @@media (max-width: 480px) {
        .cart-overlay

    {
        width: 100%;
        right: -100%;
        border-radius: 0;
    }

    .cart-overlay.open {
        right: 0;
    }

    .order-details-panel {
        left: 8px;
        right: 8px;
        top: 64px;
        max-height: 60vh;
    }

    }
</style> *@