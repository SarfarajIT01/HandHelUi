
@inject CartState CartState
@using HandHeldUi.Shared.Services
@using HandHelUi.Shared.Models
<div class="cart-overlay @(IsOpen ? "open" : "")">
    <div class="cart-container shadow-lg">
        <!-- Header -->
        <div class="cart-header d-flex justify-content-between align-items-center">
            <h5 class="fw-bold mb-0">Your Cart</h5>
            <img src="_content/HandHelUi.Shared/assets/img/csat_logo.png" style="width: 70px;" alt="Logo" />
            <button class="btn btn-close-modern" @onclick="Toggle" title="Close Cart">
                <i class="bi bi-x-lg"></i>
            </button>
        </div>

        <!-- Body -->
        <div class="cart-body">
            @if (CartItems.Any())
            {
                @foreach (var item in CartItems)
                {
                    <div class="cart-item d-flex justify-content-between align-items-center p-3 mb-3 rounded shadow-sm">
                        <div>
                            <h6 class="fw-semibold mb-1">@item.Name</h6>
                            <small class="text-muted">₹ @item.Price</small>
                        </div>
                        <div class="d-flex align-items-center gap-2">
                            <button class="qty-btn minus" @onclick="() => OnDecreaseQty.InvokeAsync(item)">
                                <i class="bi bi-dash-lg"></i>
                            </button>
                            <span class="fw-bold fs-6">@item.Qty</span>
                            <button class="qty-btn plus" @onclick="() => OnIncreaseQty.InvokeAsync(item)">
                                <i class="bi bi-plus-lg"></i>
                            </button>
                        </div>
                    </div>

                    @if (item.CartSubItem.Any())
                    {
                        <div class="ms-3 mb-2">
                            <small class="text-secondary d-block mb-1">Customizations:</small>
                            @foreach (var subItem in item.CartSubItem)
                            {
                                <div class="d-flex justify-content-between align-items-center small border-start ps-2">
                                    <span>@subItem.SubItemName</span>
                                    <span class="text-danger">₹ @subItem.SubItemRates</span>
                                </div>
                            }
                        </div>
                    }
                }
            }
            else
            {
                <div class="text-center text-muted mt-5">
                    <i class="bi bi-bag-x fs-1 text-secondary"></i>
                    <p>Your cart is empty</p>
                </div>
            }
        </div>

        <!-- Footer -->
        <div class="cart-footer p-3 border-top">
            <div class="d-flex justify-content-between mb-2">
                <span>Subtotal</span> <strong>₹ 3250</strong>
            </div>
            <div class="d-flex justify-content-between mb-2">
                <span>Tax</span> <strong>₹ 50</strong>
            </div>
            <div class="d-flex justify-content-between mb-2">
                <span>Discount</span> <strong>₹ 50</strong>
            </div>

            <hr class="my-2" />

            <div class="d-flex justify-content-between mb-3">
                <h5 class="fw-bold">Total</h5>
                <h5 class="fw-bold text-success">
                    ₹ @(CartItems.Sum(x => x.Price * x.Qty) + CartItems.SelectMany(x => x.CartSubItem).Sum(x => x.SubItemRates ?? 0))
                </h5>
            </div>

            <button class="btn btn-modern-gradient w-100 py-2 fs-6" @onclick="CheckoutClicked" disabled="@IsCheckoutDisabled">
                Proceed to Checkout
            </button>
        </div>
    </div>
</div>



@code {
    [Parameter] public bool IsOpen { get; set; }
    [Parameter] public EventCallback Toggle { get; set; }
    [Parameter] public List<CartItem> CartItems { get; set; } = new();
    [Parameter] public EventCallback<CartItem> OnIncreaseQty { get; set; }
    [Parameter] public EventCallback<CartItem> OnDecreaseQty { get; set; }
    [Parameter] public EventCallback OnCheckout { get; set; }
    [Parameter] public List<MenuItem> MenuItems { get; set; } = new(); // Added to access sub-item MinQty

    private bool IsCheckoutDisabled => !CartItems.Any() || HasSubItemMinQtyViolation();

    private bool HasSubItemMinQtyViolation()
    {
        foreach (var cartItem in CartItems)
        {
            // Find corresponding MenuItem
            var menuItem = MenuItems.FirstOrDefault(mi => mi.ItemName == cartItem.Name && mi.ItemCode == cartItem.ItemCode);
            if (menuItem == null) continue;

            // Check for CommonAddons first
            if (menuItem.CommonAddons?.Any() == true)
            {
                foreach (var group in menuItem.CommonAddons)
                {
                   
                    var groupSubItems = group.ToList();

                    var groupMinQty = groupSubItems.Min(sub => sub.SubMinQty ?? 0);
                    if (groupMinQty > 0)
                    {
                        
                        var selectedCountInGroup = cartItem.CartSubItem
                            .Count(csi => groupSubItems.Any(sub => sub.SubItemName == csi.SubItemName));

                        if (selectedCountInGroup < groupMinQty)
                        {
                            return true; 
                        }
                    }
                }
            }
            // Else check for SubItems
            else if (menuItem.SubItems?.Any() == true)
            {
                foreach (var group in menuItem.SubItems)
                {
                    var groupSubItems = group.ToList();
                    var groupMinQty = groupSubItems.Min(sub => sub.SubMinQty ?? 0);

                    if (groupMinQty > 0)
                    {
                        var selectedCountInGroup = cartItem.CartSubItem
                            .Count(csi => groupSubItems.Any(sub => sub.SubItemName == csi.SubItemName));

                        if (selectedCountInGroup < groupMinQty)
                        {
                            return true; 
                        }
                    }
                }
            }
        }

        return false; 
    }

    private string GetDisableReason()
    {
        if (!CartItems.Any())
            return "Cart is empty";

        foreach (var cartItem in CartItems)
        {
            var menuItem = MenuItems.FirstOrDefault(mi => mi.ItemName == cartItem.Name && mi.ItemCode == cartItem.ItemCode);
            if (menuItem == null) continue;

            // Check CommonAddons group-wise
            if (menuItem.CommonAddons?.Any() == true)
            {
                int groupIndex = 1;
                foreach (var group in menuItem.CommonAddons)
                {
                    var groupSubItems = group.ToList();
                    var groupMinQty = groupSubItems.Min(sub => sub.SubMinQty ?? 0);
                    var groupName = groupSubItems.FirstOrDefault()?.SubGrpName ?? $"Group {groupIndex}";

                    if (groupMinQty > 0)
                    {
                        var selectedCountInGroup = cartItem.CartSubItem
                            .Count(csi => groupSubItems.Any(sub => sub.SubItemName == csi.SubItemName));

                        if (selectedCountInGroup < groupMinQty)
                        {
                            return $"Please add at least {groupMinQty} customization(s) for {cartItem.Name} in '{groupName}'";
                        }
                    }
                    groupIndex++;
                }
            }
            // Check SubItems group-wise
            else if (menuItem.SubItems?.Any() == true)
            {
                int groupIndex = 1;
                foreach (var group in menuItem.SubItems)
                {
                    var groupSubItems = group.ToList();
                    var groupMinQty = groupSubItems.Min(sub => sub.SubMinQty ?? 0);
                    var groupName = groupSubItems.FirstOrDefault()?.SubGrpName ?? $"Group {groupIndex}";


                    if (groupMinQty > 0)
                    {
                        var selectedCountInGroup = cartItem.CartSubItem
                            .Count(csi => groupSubItems.Any(sub => sub.SubItemName == csi.SubItemName));

                        if (selectedCountInGroup < groupMinQty)
                        {
                            return $"Please add at least {groupMinQty} customization(s) for {cartItem.Name} in '{groupName}'";
                        }
                    }
                    groupIndex++;
                }
            }
        }

        return "";
    }


    private async Task CheckoutClicked()
    {
        if (OnCheckout.HasDelegate)
        {
            await OnCheckout.InvokeAsync();
        }
    }

    private void RemoveSubItem(CartItem parentItem, CartSubItem subItem)
    {
        CartState.DecreaseItemQty(parentItem.Name, subItem.SubItemName);
    }
}
<style>
    .cart-overlay {
        position: fixed;
        top: 0;
        right: -420px;
        width: 380px;
        height: 100vh;
        background: rgba(255,255,255,0.97);
        backdrop-filter: blur(10px);
        border-left: 2px solid rgba(0,0,0,0.05);
        transition: right 0.4s ease;
        z-index: 1050;
        display: flex;
        flex-direction: column;
        border-radius: 20px 0 0 20px;
    }

        .cart-overlay.open {
            right: 0;
        }

    .cart-container {
        height: 100%;
        display: flex;
        flex-direction: column;
    }

    .cart-header {
        padding: 16px 20px;
        background: linear-gradient(135deg, #f6f7fb, #ffffff);
        border-bottom: 1px solid #eee;
        border-radius: 20px 0 0 0;
    }

    .btn-close-modern {
        background: #f8f9fa;
        border: none;
        border-radius: 50%;
        width: 35px;
        height: 35px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: #333;
        font-size: 1.1rem;
        box-shadow: 0 2px 6px rgba(0,0,0,0.1);
        transition: all 0.2s ease;
    }

        .btn-close-modern:hover {
            background: #ff4c4c;
            color: white;
            transform: rotate(90deg);
        }

    .cart-body {
        flex: 1;
        overflow-y: scroll;
        padding: 16px;
        background: #fafafa;
    }

        /* Hide scrollbar but keep scroll functional */
        .cart-body::-webkit-scrollbar {
            width: 0px;
            background: transparent;
        }

    .cart-body {
        scrollbar-width: none; /* Firefox */
    }

    /* Cart item hover */
    .cart-item {
        background: white;
        border-radius: 14px;
        transition: all 0.25s ease;
    }

        .cart-item:hover {
            transform: scale(1.02);
            box-shadow: 0 3px 10px rgba(0,0,0,0.1);
        }

    /* Modern quantity buttons */
    .qty-btn {
        width: 36px;
        height: 36px;
        border: none;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1rem;
        font-weight: bold;
        transition: all 0.25s ease;
        color: white;
    }

        .qty-btn.plus {
            background: linear-gradient(135deg, #28a745, #56d364);
            box-shadow: 0 2px 8px rgba(40,167,69,0.3);
        }

        .qty-btn.minus {
            background: linear-gradient(135deg, #dc3545, #ff6b81);
            box-shadow: 0 2px 8px rgba(220,53,69,0.3);
        }

        .qty-btn:hover {
            transform: scale(1.1);
        }

    .btn-modern-gradient {
        background: linear-gradient(135deg, #ff6a00, #ee0979);
        border: none;
        color: white;
        border-radius: 10px;
        font-weight: 600;
        transition: background 0.3s ease, transform 0.2s;
    }

        .btn-modern-gradient:hover {
            transform: scale(1.03);
            background: linear-gradient(135deg, #ee0979, #ff6a00);
        }

</style>