
@page "/Feedback"
@using HandHelUi.Shared.Models
@inject IJSRuntime JS
@inject HttpClient Http

@if (ShowFeedbackPopup)
{
    <div class="popup-overlay-guest" @onclick="ClosePopup">
        <div class="popup-card-guest" @onclick:stopPropagation>
            <header class="popup-header">
                <h3>Feedback</h3>
                <button class="btn-close" @onclick="ClosePopup">×</button>
            </header>

            <div class="popup-body">

                <!-- Dynamic Bill Dropdown -->
                <div class="input-block">
                    <label>Select Bill</label>
                    <select class="input-box" @onchange="OnBillSelected">
                        <option value="">-- Select Bill --</option>
                        @if (Bills != null)
                        {
                            @foreach (var bill in Bills)
                            {
                                <option value="@bill.RbilNo">@bill.RbilNo</option>
                            }
                        }
                    </select>
                </div>

                <div class="input-block">
                    <label>Steward Name</label>
                    <input class="input-box"
                           @bind="model.Steward"
                           placeholder="Steward Name"
                           readonly />
                </div>

                <div class="input-block">
                    <label>Table No</label>
                    <input class="input-box"
                           @bind="model.TableName"
                           placeholder="Table No"
                           readonly />
                </div>

                <!-- Existing Fields -->
                <div class="input-block">
                    <label>Mobile</label>
                    <input class="input-box" @bind="model.GCode" placeholder="+91 Mobile" />
                </div>

                <div class="input-block">
                    <label>Guest Name</label>
                    <input class="input-box" @bind="model.GName" placeholder="Full Name" />
                </div>

                <div class="input-block">
                    <label>Email</label>
                    <input class="input-box" @bind="model.Email" placeholder="Email" />
                </div>

                <div class="date-row">
                    <div class="date-col">
                        <label>Birthday</label>
                        <InputDate @bind-Value="model.Dob" class="input-box" />
                    </div>

                    <div class="date-col">
                        <label>Anniversary</label>
                        <InputDate @bind-Value="model.Anniversary" class="input-box" />
                    </div>
                </div>

                <div class="input-block">
                    <label>Gender</label>
                    <div class="radio-row">
                        <label class="radio-pill">
                            <input type="radio" name="gender" value="M" checked="@(model.NewGender == "M")" @onchange="@((e) => model.NewGender = "M")" /> Male
                        </label>
                        <label class="radio-pill">
                            <input type="radio" name="gender" value="F" checked="@(model.NewGender == "F")" @onchange="@((e) => model.NewGender = "F")" /> Female
                        </label>
                    </div>
                </div>

                <div class="input-block">
                    <label>Captain/Manager visited?</label>
                    <div class="radio-row">
                        <label class="radio-pill">
                            <input type="radio" name="visit" value="Yes" checked="@(model.NewVisitor == "Yes")" @onchange="@((e) => model.NewVisitor = "Yes")" /> Yes
                        </label>
                        <label class="radio-pill">
                            <input type="radio" name="visit" value="No" checked="@(model.NewVisitor == "No")" @onchange="@((e) => model.NewVisitor = "No")" /> No
                        </label>
                    </div>
                </div>

                <div class="input-block">
                    <label>Experience Rating</label>
                    <div class="rating-row">
                        @foreach (var rating in Ratings)
                        {
                            <button class="rating-btn @(model.FoodQuality == rating ? "active" : "")"
                                    @onclick="() => SelectExperienceRating(rating)">
                                @rating
                            </button>
                        }
                    </div>
                </div>


                <div class="input-block">
                    <label>Comments</label>
                    <textarea class="input-box textarea-box"
                              @bind="model.GComment"
                              placeholder="Your valuable feedback..."></textarea>
                </div>

            </div>

            <footer class="popup-footer">
                <button class="submit-btn" @onclick="SubmitFeedback">SUBMIT FEEDBACK</button>
            </footer>
        </div>
    </div>
}

@code {

    [Parameter] public bool ShowFeedbackPopup { get; set; } = true;
    [Parameter] public EventCallback<bool> ShowChanged { get; set; }

    private string OutletId = "";
    private string posCode = "";
    private bool _initialized;

    // List of bills loaded from API
    private List<BillModel>? Bills = new();

    // Feedback model
    private PfbGuestCommentDto model = new();

    private bool _isInitialized;

    private List<string> Ratings = new() { "Bad", "Average", "Good", "Very Good" };

    private void SelectExperienceRating(string rating)
    {
        model.FoodQuality = rating;
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_isInitialized)
        {
            try
            {
                OutletId = await JS.InvokeAsync<string>("localStorage.getItem", "outletId");
                posCode = await JS.InvokeAsync<string>("localStorage.getItem", "posCode");

                if (!string.IsNullOrEmpty(posCode))
                {
                    Bills = await Http.GetFromJsonAsync<List<BillModel>>($"api/CSATSU_RMS_RBILL_SUM_BAK/{posCode}");
                }

                _isInitialized = true;
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error during OnAfterRenderAsync: {ex.Message}");
            }
        }
    }


    // When user selects a bill number
    private void OnBillSelected(ChangeEventArgs e)
    {
        var selectedBillNo = e.Value?.ToString();
        if (!string.IsNullOrEmpty(selectedBillNo))
        {
            var selected = Bills.FirstOrDefault(b => b.RbilNo == selectedBillNo);
            if (selected != null)
            {
                model.GBill = selected.RbilNo;
                model.Steward = selected.RbilStw;
                model.TableName = selected.RbilTbl;
            }
        }
        else
        {
            model.GBill = null;
            model.Steward = null;
            model.TableName = null;
        }
    }

    private async Task ClosePopup()
    {
        await ShowChanged.InvokeAsync(false);
    } 

    async Task SubmitFeedback()
    {
        try
        {
            // Create the feedback object to send to API
            var feedbackRequest = new PfbGuestCommentDto
            {
                GCode = model.GCode,
                GPosC = posCode,
                Steward = model.Steward,
                GName = model.GName,
                Email = model.Email,
                Anniversary = model.Anniversary,
                Birthday = model.Birthday,
                // DiningQuality = dining,
                FoodQuality = model.FoodQuality,
                // ServiceQuality = services,
                // ReferenceBy = referenceBy,
                GComment = model.GComment,
                TableName = model.TableName,
                GBill = model.GBill,
                NewGender = model.NewGender,
                NewVisitor = model.NewVisitor,
                // DynamicRating = dynamicRatings
            };

            // Send to API
            var response = await Http.PostAsJsonAsync("api/CSATSU_RMS_GUEST_COMMENT", feedbackRequest);

            if (response.IsSuccessStatusCode)
            {
                ShowFeedbackPopup = false;
                var result = await response.Content.ReadAsStringAsync();
                if (result.Contains("Already Exist", StringComparison.OrdinalIgnoreCase))
                {
                    await JS.InvokeVoidAsync("Swal.fire", new
                    {
                        title = "Feedback already submitted.",
                        icon = "warning",
                        button = "Go Back"
                    });
                }
                else
                {
                    await JS.InvokeVoidAsync("Swal.fire", new
                    {
                        title = "Thank You!",
                        text = "Feedback Successfully Submitted.",
                        icon = "success",
                        button = "Go Back"
                    });
                }

                // Reset form
                model = new PfbGuestCommentDto();
                StateHasChanged();
                await ClosePopup();
            }
            else
            {
                ShowFeedbackPopup = false;
                await JS.InvokeVoidAsync("Swal.fire", new
                {
                    title = "Error",
                    text = "Something went wrong while submitting feedback.",
                    icon = "error"
                });
                await ClosePopup();
            }
        }
        catch (Exception ex)
        {
            ShowFeedbackPopup = false;
            Console.WriteLine($"Error: {ex.Message}");
            await JS.InvokeVoidAsync("Swal.fire", new
            {
                title = "Error",
                text = "Unexpected error occurred.",
                icon = "error"
            });
            await ClosePopup();
        }
    }


    // Models
    public class BillModel
    {
        public string? RbilNo { get; set; }
        public string? RbilStw { get; set; }
        public string? RbilTbl { get; set; }
    }
}

<style>


/* ——— Same styles used in GuestArrival ——— */

.popup-overlay-guest {
    position: fixed;
    inset: 0;
    background: rgba(0,0,0,0.6);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 2000;
    animation: fadeIn 0.25s ease;
    padding: 10px; /* allows some space on small screens */
    overflow-y: auto; /* scroll if popup is taller than viewport */
    -ms-overflow-style: none;  /* IE and Edge */
    scrollbar-width: none;  /* Firefox */
}

.popup-overlay-guest::-webkit-scrollbar {
    display: none;  /* Chrome, Safari, Opera */
}

.popup-card-guest {
    width: 360px;
    background: rgba(255, 255, 255, 0.95);
    border-radius: 16px;
    box-shadow: 0 8px 25px rgba(0,0,0,0.18);
    padding: 20px;
    animation: slideUp 0.25s ease;
    max-height: 90vh; /* limits popup height to viewport */
    overflow-y: auto; /* scroll inside popup */
    -ms-overflow-style: none;
    scrollbar-width: none;
}

.popup-card-guest::-webkit-scrollbar {
    display: none;
}

.popup-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.btn-close {
    border: none;
    background: none;
    font-size: 26px;
    cursor: pointer;
}

/* —— Inputs —— */

.input-block {
    display: flex;
    flex-direction: column;
    margin-bottom: 10px;
}

label {
    font-size: 13px;
    font-weight: 500;
    margin-bottom: 4px;
    color: #444;
}

.input-box {
    padding: 10px 12px;
    border-radius: 10px;
    border: 1px solid #e0e0e0;
    outline: none;
    font-size: 14px;
    transition: 0.2s all;
}

.input-box:focus {
    border-color: #0078ff;
    box-shadow: 0 0 8px rgba(0,120,255,0.25);
}

textarea {
    resize: none;
}

/* —— Date Columns —— */

.date-row {
    display: flex;
    gap: 10px;
}

.date-col {
    flex: 1;
    display: flex;
    flex-direction: column;
}

/* —— Radio Pills —— */

.radio-row {
    display: flex;
    gap: 10px;
    flex-wrap: wrap;
}

.radio-pill {
    padding: 6px 12px;
    border: 1px solid #ccc;
    border-radius: 30px;
    font-size: 12px;
    cursor: pointer;
}

/* —— Experience Rating —— */

.rating-row {
    display: flex;
    flex-wrap: wrap;
    gap: 6px;
}

.rating-btn {
    border: none;
    padding: 7px 12px;
    border-radius: 8px;
    background: #fff;
    border: 1px solid #ddd;
    cursor: pointer;
    font-size: 12px;
}

/* —— Footer Submit —— */

.popup-footer {
    margin-top: 18px;
}

.submit-btn {
    width: 100%;
    padding: 12px;
    background: linear-gradient(90deg, #0078ff, #0098ff);
    color: #fff;
    border: none;
    border-radius: 10px;
    font-weight: 600;
    cursor: pointer;
    transition: 0.2s;
}

.submit-btn:hover {
    opacity: .92;
    transform: translateY(-1px);
}

    .rating-btn.active {
        background-color: #007bff;
        color: white;
        font-weight: 600;
    }


/* Animations */

@@keyframes slideUp {
    from {
        transform: translateY(40px);
        opacity: 0;
    }
    to {
        transform: translateY(0);
        opacity: 1;
    }
}

@@keyframes fadeIn {
    from {
        opacity: 0;
    }
    to {
        opacity: 1;
    }
}
</style>