@page "/TableAssign"
@using HandHelUi.Shared.Models
@inject IJSRuntime JS
@inject HttpClient Http

@if (ShowTableAssign)
{
    <div class="popup-overlay-guest" @onclick="ClosePopup">
        <div class="popup-card-guest" @onclick:stopPropagation>
            <header class="popup-header">
                <h3>Table Assign</h3>
                <button class="btn-close" @onclick="ClosePopup"></button>
            </header>

            <button class="assign-btn" @onclick="AssignTable">Assign Table</button>

            <div class="popup-body">
                <div class="input-block">
                    <label>Mobile</label>
                    <input class="input-box" @bind="Guest.Phone1" placeholder="+91 Mobile" />
                </div>

                <div class="input-block">
                    <label>Guest Name</label>
                    <input class="input-box" @bind="Guest.GName" placeholder="Full Name" />
                </div>

                <div class="input-block">
                    <label>Table No.</label>
                    <input class="input-box" @bind="Guest.TableNo" @onclick="SelectTable" placeholder="T-01" />
                </div>
            </div>

            <footer class="popup-footer">
                <button class="submit-btn" @onclick="TableAssigned">SUBMIT</button>
            </footer>
        </div>
    </div>
}

@if (ShowGuestPopup)
{
    <!-- Guest Component -->
    <Guest IsOpen="@ShowGuestPopup"
           ArrivalGuest="@ArrivalGuest"
           OnGuestSelected="SelectedGuest"
           IsOpenChanged="@((val) => ShowGuestPopup = val)" />
}

<!-- Table Component -->
<TableSelection IsOpen="@ShowTablePopup"
                IsOpenChanged="OnTablePopupChanged"
                OnTableSelected="HandleTableSelected"
                OutletId="@OutletId" />

@code {
    [Parameter] public bool ShowTableAssign { get; set; } = true;
    [Parameter] public EventCallback<bool> ShowChanged { get; set; }

    private bool ShowGuestPopup = false;
    private bool ShowTablePopup = false;
    private string? ArrivalGuest = "ArrivedGuest";
    private string OutletId = "";
    private string posCode = "";
    private bool _initialized;

    public class GuestArrival
    {
        public string Mobile { get; set; } = "";
        public string GuestName { get; set; } = "";
        public string Address { get; set; } = "";
        public string TableNo { get; set; } = "";
    }

    PfbGuestDto Guest = new();
    // bool ShowGuestArrival = false;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_initialized)
        {
            OutletId = await JS.InvokeAsync<string>("localStorage.getItem", "outletId");
            posCode = await JS.InvokeAsync<string>("localStorage.getItem", "posCode");
            _initialized = true;

            StateHasChanged();
        }
    }


    private void SelectedGuest(PfbGuestDto guest)
    {
        Guest.GName = guest.GName;
        Guest.Phone1 = guest.Phone1;
        // reservation.Gcode = guest.GuestCode;

        ShowTableAssign = true;
    }

    private void SelectTable()
    {
        ShowTableAssign = false;
        ShowTablePopup = true;
    }

    private void OnTablePopupChanged(bool value)
    {
        ShowTablePopup = value;
        ShowTableAssign = true;
    }

    private void HandleTableSelected(PfbRmscMst selectedTable)
    {
        Guest.TableNo = selectedTable.RmscCod;
        ShowTablePopup = false;
        ShowTableAssign = true;
    }

    private async Task ClosePopup()
    {
        await ShowChanged.InvokeAsync(false);
    }

    private async Task AssignTable()
    {
        await JS.InvokeVoidAsync("sessionStorage.setItem", "ResGuest", "1");
        var id1 = await JS.InvokeAsync<string>("sessionStorage.getItem", "guestactive");

        if (string.IsNullOrEmpty(id1))
        {
            // await LoadGuestArrivalData(); 
            ShowGuestPopup = true;
            ShowTableAssign = false;
            await JS.InvokeVoidAsync("sessionStorage.setItem", "guestactive", "");
        }
        else
        {
            await JS.InvokeVoidAsync("sessionStorage.setItem", "guestactive", "");
            ShowGuestPopup = false;
            ShowTableAssign = true;
            await LoadTableDetails(id1); // addtbldetail(id1)
        }
    }

    private async Task LoadGuestArrivalData()
    {
        try
        {
            string postype = await JS.InvokeAsync<string>("sessionStorage.getItem", "postype");
            var response = await Http.GetAsync("api/home/arrivaldata");
            if (!response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("Swal.fire", new 
                { 
                    title = "Server Error", 
                    text = "API not working properly", 
                    icon = "error" 
                });
                return;
            }

            var data = await response.Content.ReadFromJsonAsync<List<PfbGuestDto>>();
            if (data != null && data.Any())
            {
                // Example: Display data in your UI (if needed)
                Console.WriteLine($"Loaded {data.Count} guests");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("Swal.fire", new 
            {
                title = "Error", 
                text = ex.Message, 
                icon = "error" 
            });
        }
    }

    private async Task LoadTableDetails(string id)
    {
        try
        {
            var response = await Http.GetAsync($"api/home/addtbldetail?id={id}");
            if (response.IsSuccessStatusCode)
            {
                var data = await response.Content.ReadFromJsonAsync<List<PfbGuestDto>>();
                if (data?.Any() == true)
                {
                    var info = data.First();
                    Guest.Phone1 = info.Phone1;
                    Guest.GName = info.GName;
                    Guest.TableNo = info.TableNo;
                }
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("Swal.fire", new { title = "Error", text = ex.Message, icon = "error" });
        }
    }

    private async Task TableAssigned()
    {
        try
        {
            var reserData = new 
            {
                Pos = posCode,
                RDate = DateTime.Now,
                GName = Guest.GName,
                GCode = Guest.Phone1,
                Phone1 = Guest.Phone1,
                TableNo = Guest.TableNo
            };

            var response = await Http.PostAsJsonAsync("api/CSATSU_RMS_GuestArrival", reserData);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadAsStringAsync();

                if (result.Contains("Insert Sucessfully", StringComparison.OrdinalIgnoreCase))
                {
                    ShowTableAssign = false;
                    StateHasChanged();
                    await JS.InvokeVoidAsync("Swal.fire", new
                    {
                        title = "Successful!",
                        text = "Table Assigned",
                        icon = "success",
                        button = "Ok!"
                    });

                    // clear UI
                    Guest = new PfbGuestDto();
                    await JS.InvokeVoidAsync("sessionStorage.removeItem", "activetable");
                    // ShowTableAssign = false;
                    await ClosePopup();
                }
                else
                {
                    await JS.InvokeVoidAsync("Swal.fire", new
                    {
                        title = "Error",
                        text = result,
                        icon = "error"
                    });
                }
            }
            else
            {
                await JS.InvokeVoidAsync("Swal.fire", new
                {
                    title = "Server Error",
                    text = "API not working properly",
                    icon = "error"
                });
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("Swal.fire", new
            {
                title = "Exception",
                text = ex.Message,
                icon = "error"
            });
        }
    }


    private void OnGuestArrivalClosed(bool value)
    {
        ShowGuestPopup = value;
        ShowTableAssign = !value;
    }
}


<style>
    .popup-overlay-guest {
        position: fixed;
        inset: 0;
        background: rgba(0,0,0,0.6);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 2000;
        animation: fadeIn 0.25s ease;
    }

    .popup-card-guest {
        width: 360px;
        background: rgba(255, 255, 255, 0.95);
        border-radius: 16px;
        box-shadow: 0 8px 25px rgba(0,0,0,0.18);
        padding: 20px;
        animation: slideUp 0.25s ease;
    }

    .popup-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

        .popup-header h3 {
            font-size: 20px;
            font-weight: 600;
        }

    .close-btn {
        border: none;
        background: none;
        font-size: 24px;
        cursor: pointer;
        color: #333;
    }

    /* .popup-body {
        margin-top: 14px;
    } */

    .input-block {
        display: flex;
        flex-direction: column;
        margin-bottom: 10px;
    }

    label {
        font-size: 13px;
        font-weight: 500;
        margin-bottom: 4px;
        color: #444;
    }

    .input-box {
        padding: 10px 12px;
        border-radius: 10px;
        border: 1px solid #e0e0e0;
        outline: none;
        font-size: 14px;
        transition: 0.2s all;
    }

        .input-box:focus {
            /* border-color: #7b2bf9;
            box-shadow: 0 0 0 2px rgba(111, 36, 255, 0.15); */

            border-color: #0078ff;
            box-shadow: 0 0 8px rgba(0,120,255,0.25);
            /* background: #ffffff;
            outline: none; */
        }


    textarea {
        height: 65px;
        resize: none;
    }

    .date-row {
        display: flex;
        justify-content: space-between;
        gap: 10px;
    }

    .date-col {
        flex: 1;
        display: flex;
        flex-direction: column;
    }

    .popup-footer {
        margin-top: 18px;
    }

    .submit-btn {
        width: 100%;
        padding: 12px;
        /* background: linear-gradient(90deg, #7b2bf9, #8f45ff); */
        background: linear-gradient(90deg, #0078ff);
        color: #fff;
        border: none;
        border-radius: 10px;
        font-weight: 600;
        cursor: pointer;
        transition: 0.2s;
    }

        .submit-btn:hover {
            opacity: .92;
            transform: translateY(-1px);
        }

    .assign-btn{
        /* width: 100%; */
        padding: 8px;
        background: linear-gradient(90deg, #6a00ff, #8b4dff);
        color: #fff;
        border: none;
        border-radius: 10px;
        font-weight: 600;
        cursor: pointer;
        transition: 0.2s;
    }

        .assign-btn:hover {
            background: linear-gradient(90deg, #5600cc, #7b3cff);
            transform: translateY(-2px);
        }

    @@keyframes slideUp {
        from {
            transform: translateY(40px);
            opacity: 0;
        }

        to {
            transform: translateY(0);
            opacity: 1;
        }
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
        }

        to {
            opacity: 1;
        }
    }
</style>