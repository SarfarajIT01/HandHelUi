@using HandHelUi.Shared.Models
@using HandHelUi.Shared.Services
@inject IJSRuntime JS
@inject HttpClient Http
@inject TableSelectionService TableSelectionService

@if (Show)
{
    <div class="popup-overlay-guest" @onclick="ClosePopup">
        <div class="popup-card-guest" @onclick:stopPropagation>
            <header class="popup-header">
                <h3>Guest Arrival</h3>
                <button class="btn-close" @onclick="ClosePopup"></button>
            </header>

            <div class="popup-body">

                <div class="input-block">
                    <label>Mobile</label>
                    <input class="input-box"
                           @bind="guest.Phone1"
                           @oninput="CheckMobile"
                           placeholder="+91 Mobile" />
                </div>

                <div class="input-block">
                    <label>Guest Name</label>
                    <input class="input-box"
                           @bind="guest.GName"
                           placeholder="Full Name" />
                </div>

                <div class="input-block">
                    <label>Address</label>
                    <textarea class="input-box"
                              @bind="guest.Add1"
                              placeholder="Guest Address"></textarea>
                </div>

                <div class="input-block">
                    <label>Table No.</label>
                    <input class="input-box"
                           @bind="guest.TableNo"
                           @onclick = "SelectTable"
                           placeholder="T-01" />
                </div>

                <div class="date-row">
                    <div class="date-col">
                        <label>Date</label>
                        <input @bind="guestDate" type="date" class="input-box" />
                    </div>

                    <div class="date-col">
                        <label>Time</label>
                        <input @bind="guestTime" type="time" class="input-box" />
                    </div>
                </div>
            </div>

            <footer class="popup-footer">
                <button class="submit-btn" @onclick="SubmitGuest">SUBMIT</button>
            </footer>
        </div>
    </div>
}

<!-- Table Component -->
<TableSelection IsOpen="@ShowTablePopup"
                IsOpenChanged="OnTablePopupChanged"
                OnTableSelected="HandleTableSelected"
                OutletId="@OutletId" />

@code {

    [Parameter] public bool Show { get; set; }
    [Parameter] public EventCallback<bool> ShowChanged { get; set; }
    private string OutletId = "";
    private string posCode  = "";

    private bool ShowTablePopup = false;

    PfbGuestDto guest = new();
    DateTime guestDate = DateTime.Today;
    TimeOnly guestTime = new(19, 00);

    private bool _initialized;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_initialized)
        {
            OutletId = await JS.InvokeAsync<string>("localStorage.getItem", "outletId");
            posCode = await JS.InvokeAsync<string>("localStorage.getItem", "posCode"); 
            _initialized = true;

            StateHasChanged();
        }
    }

    private void SelectTable()
    {
        Show = false;
        ShowTablePopup = true;
    }

    private void HandleTableSelected(PfbRmscMst selectedTable)
    {
        guest.TableNo = selectedTable.RmscCod;
        ShowTablePopup = false;
        Show = true;
    }

    private void OnTablePopupChanged(bool value)
    {
        ShowTablePopup = value;
        Show = true;
    }


    private async Task ClosePopup()
    {
        await ShowChanged.InvokeAsync(false);
    }

    private async Task CheckMobile(ChangeEventArgs e)
    {
        var mobile = e.Value?.ToString();

        if (!string.IsNullOrWhiteSpace(mobile) && mobile.Length >= 10)
        {
            await SearchGuestByMobile(mobile);
        }
    }

    private async Task SearchGuestByMobile(string mobile)
    {
        try
        {
            var response = await Http.GetAsync($"api/CSATSU_RMS_GUEST/by-mobile/{mobile}");

            if (response.IsSuccessStatusCode)
            {
                var data = await response.Content.ReadFromJsonAsync<List<PfbGuestDto>>();

                if (data?.Count > 0)
                {
                    guest.GName = data[0].GName ?? "";
                    guest.Add1 = data[0].Add1 ?? "";
                }
            }
            else
            {
                guest.GName = "";
                guest.Add1 = "";
                await JS.InvokeVoidAsync("alert", "Guest does not exist!");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }

        StateHasChanged();
    }

    private async Task SubmitGuest()
    {
        try
        {
            // Create guest object
            var newGuest = new PfbGuestDto
            {
                GName = guest.GName,
                GuestCode = guest.Phone1, 
                Phone1 = guest.Phone1,
                Add1 = guest.Add1,
                // Covers = guest.Covers,
                TableNo = guest.TableNo,
                // RDate = guestDate,
                // RTime = guestTime
            };

            // Add guest to master first
            var guestResponse = await Http.PostAsJsonAsync("api/CSATSU_RMS_GUEST", newGuest);

            if (!guestResponse.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("alert", "Failed to add guest.");
                return;
            }

            var guestResult = await guestResponse.Content.ReadAsStringAsync();
            if (!guestResult.Contains("Sucessfully", StringComparison.OrdinalIgnoreCase))
            {
                await JS.InvokeVoidAsync("alert", "Guest not saved properly.");
                return;
            }

            // Now call Guest Arrival API
            var arrivalPayload = new
            {
                Pos = posCode,
                RDate = guestDate.ToString("yyyy-MM-dd"),
                RTime = guestTime.ToString("HH:mm"),
                GName = guest.GName,
                GCode = guest.Phone1,
                Phone = guest.Phone1,
                // Covers = guest.Covers,
                Add1 = guest.Add1,
                TblNo = guest.TableNo
            };

            var arrivalResponse = await Http.PostAsJsonAsync("api/CSATSU_RMS_GuestArrival", arrivalPayload);

            if (arrivalResponse.IsSuccessStatusCode)
            {
                var resultText = await arrivalResponse.Content.ReadAsStringAsync();

                if (resultText.Contains("Insert Sucessfully", StringComparison.OrdinalIgnoreCase))
                {
                    // await JS.InvokeVoidAsync("swal", new
                    // {
                    //     title = "Successful!",
                    //     text = "Guest Arrived!",
                    //     icon = "success",
                    //     button = "Ok!"
                    // });
                    Show = false;
                    StateHasChanged();
                    await JS.InvokeVoidAsync("Swal.fire", new
                    {
                        title = "Successful!",
                        text = "Guest Arrived!",
                        icon = "success",
                        confirmButtonText = "OK"
                    });


                    // Clear UI
                    guest = new();
                    guestDate = DateTime.Today;
                    guestTime = new TimeOnly(19, 00);
                    
                    await ClosePopup();
                }
                else
                {
                    await JS.InvokeVoidAsync("alert", resultText);
                }
            }
            else
            {
                await JS.InvokeVoidAsync("alert", "Arrival API failed!");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }


}

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<style>
.popup-overlay-guest {
    position: fixed;
    inset: 0;
    background: rgba(0,0,0,0.6);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 2000;
    animation: fadeIn 0.25s ease;
}

.popup-card-guest {
    width: 360px;
    background: rgba(255, 255, 255, 0.95);
    border-radius: 16px;
    box-shadow: 0 8px 25px rgba(0,0,0,0.18);
    padding: 20px;
    animation: slideUp 0.25s ease;
}

.popup-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.popup-header h3 {
    font-size: 20px;
    font-weight: 600;
}

.close-btn {
    border: none;
    background: none;
    font-size: 24px;
    cursor: pointer;
    color: #333;
}

/* .popup-body {
    margin-top: 14px;
} */

.input-block {
    display: flex;
    flex-direction: column;
    margin-bottom: 10px;
}

label {
    font-size: 13px;
    font-weight: 500;
    margin-bottom: 4px;
    color: #444;
}

.input-box {
    padding: 10px 12px;
    border-radius: 10px;
    border: 1px solid #e0e0e0;
    outline: none;
    font-size: 14px;
    transition: 0.2s all;
}

        .input-box:focus {
            /* border-color: #7b2bf9;
            box-shadow: 0 0 0 2px rgba(111, 36, 255, 0.15); */
            border-color: #0078ff;
            box-shadow: 0 0 8px rgba(0,120,255,0.25);
        }



textarea {
    height: 65px;
    resize: none;
}

.date-row {
    display: flex;
    justify-content: space-between;
    gap: 10px;
}

.date-col {
    flex: 1;
    display: flex;
    flex-direction: column;
}

.popup-footer {
    margin-top: 18px;
}

.submit-btn {
    width: 100%;
    padding: 12px;
    /* background: linear-gradient(90deg, #7b2bf9, #8f45ff); */
        background: linear-gradient(90deg, #0078ff);
    color: #fff;
    border: none;
    border-radius: 10px;
    font-weight: 600;
    cursor: pointer;
    transition: 0.2s;
}

.submit-btn:hover {
    opacity: .92;
    transform: translateY(-1px);
}

@@keyframes slideUp {
    from {
        transform: translateY(40px);
        opacity: 0;
    }
    to {
        transform: translateY(0);
        opacity: 1;
    }
}

@@keyframes fadeIn {
    from {
        opacity: 0;
    }
    to {
        opacity: 1;
    }
}
</style>