@* @page "/outlet-view"
@using HandHelUi.Shared.Models
@inject HttpClient Http
@inject IJSRuntime JS

<div class="container my-4">
    @if (Outlets is not null && Outlets.Any())
    {
        <div class="col">
            @foreach (var outlet in Outlets)
            {
                <div class="col-md-12 col-sm-12 col-lg-12 mb-3">
                    <a class="card outlet-card shadow-lg border-0 rounded-4 h-100" href="/menu/@outlet.OutletId" style="text-decoration: none;">
                        <div class="card-body p-4">
                            <div class="text-center mb-3">
                                <h5 class="mb-0"><i class="bi bi-shop me-2"></i>@outlet.Name</h5>
                                <p class="text-muted">Outlet ID: @outlet.OutletId</p>
                            </div>
                        </div>
                    </a>
                </div>
            }
        </div>
    }
    else
    {
        <div class="alert alert-info shadow-sm">
            <i class="bi bi-info-circle me-2"></i>No outlet data available.
        </div>
    }
</div>




@code {
    public List<CsatcloudOutletMst> Outlets { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await GetOutlets();
    }

    private async Task GetOutlets()
    {
        try
        {
            var response = await Http.GetAsync("api/CSAT_RMS_GetOutlet");

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<List<CsatcloudOutletMst>>();
                if (result is not null)
                {
                    Outlets = result;
                }
            }
            else
            {
                await JS.InvokeVoidAsync("alert", "No outlet data available.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error getting outlets: " + ex.Message);
            await JS.InvokeVoidAsync("alert", "Error while fetching outlet data.");
        }
    }
} *@


@page "/outlet-view"
@using HandHelUi.Shared.Models
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager NavigationManager

<div class="container my-4">
    @if (Outlets is not null && Outlets.Any())
    {
        <div class="col">
            @foreach (var outlet in Outlets)
            {
                <div class="col-md-12 col-sm-12 col-lg-12 mb-3">
                    <div class="card outlet-card shadow-lg border-0 rounded-4 h-100"
                         @onclick="() => NavigateToMenu(outlet.OutletId)"
                         style="cursor: pointer;">
                        <div class="card-body p-4">
                            <div class="text-center mb-3">
                                <h5 class="mb-0">
                                    <i class="bi bi-shop me-2"></i>@outlet.Name
                                </h5>
                                <p class="text-muted">Outlet ID: @outlet.OutletId</p>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="alert alert-info shadow-sm">
            <i class="bi bi-info-circle me-2"></i>No outlet data available.
        </div>
    }
</div>

@code {
    public List<CsatcloudOutletMst> Outlets { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await GetOutlets();
    }

    private async Task GetOutlets()
    {
        try
        {
            var response = await Http.GetAsync("api/CSAT_RMS_GetOutlet");

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<List<CsatcloudOutletMst>>();
                if (result is not null)
                {
                    Outlets = result;
                }
            }
            else
            {
                await JS.InvokeVoidAsync("alert", "No outlet data available.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error getting outlets: " + ex.Message);
            await JS.InvokeVoidAsync("alert", "Error while fetching outlet data.");
        }
    }

    private void NavigateToMenu(string outletId)
    {
        NavigationManager.NavigateTo($"/menu/{outletId}", forceLoad: true);
        // StateHasChanged();
    }
}



<style>
    .app-main {
    }

    .outlet-card {
        transition: all 0.3s ease;
        cursor: pointer;
    }

        .outlet-card:hover {
            transform: translateY(-4px) scale(1.03);
            box-shadow: 0 12px 25px rgba(0, 0, 0, 0.2);
            /* background: linear-gradient(135deg, #f8f9fa, #ffffff); */
            /* background-color: deepskyblue; */
            background-color: #dee2e6;
        }

        .outlet-card h5 {
            transition: color 0.3s ease;
        }

        .outlet-card:hover h5 {
            color: #0d6efd; /* Bootstrap primary */
        }
</style>