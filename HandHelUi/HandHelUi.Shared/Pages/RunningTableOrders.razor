@* @page "/running-table-panel"

<header class="removeBg">
    <div class="page-header">
        <h2>Running Table Orders</h2>
        <p>View all current running orders table-wise</p>
    </div>
    
</header>

<div class="panel-layout">
    <!-- Left Table List -->
    <div class="table-list">
        @foreach (var table in Tables)
        {
            <div class="table-item @(SelectedTable == table ? "active" : "")"
                 @onclick="() => SelectTable(table)">
                <b>Table - @table.TableNo</b><br />
                <small>@table.GuestType | @table.Location</small><br />
                <small>Cover: @table.Cover | Stw: @table.StewardId</small>
            </div>
        }
    </div>

    <!-- Right Detail Panel -->
    <div class="details-panel">
        @if (SelectedTable != null)
        {
            <div class="table-header">
                <h3>Table - @SelectedTable.TableNo</h3>
                <span>@SelectedTable.GuestType | @SelectedTable.Location</span>
            </div>

            @foreach (var order in SelectedTable.Orders)
            {
                <div class="order-block">
                    <div class="order-header">
                        <span>@order.BillNo</span>
                        <span>@order.DateTime.ToString("dd/MM/yyyy HH:mm")</span>
                    </div>

                    <div class="order-items">
                        <div class="order-item header-row">
                            <span>Item</span>
                            <span>Qty</span>
                            <span>Amount</span>
                        </div>

                        @foreach (var item in order.Items)
                        {
                            <div class="order-item">
                                <span>@item.Name</span>
                                <span>@item.Qty</span>
                                <span>₹ @item.Amount</span>
                            </div>
                        }
                    </div>

                    <div class="summary">
                        <div><b>Sub-Total</b><span>₹ @order.SubTotal</span></div>
                        <div><b>Tax</b><span>₹ @order.Tax</span></div>
                        <div class="grand-total"><b>Grand Total</b><span>₹ @order.GrandTotal</span></div>
                    </div>
                </div>
            }

            <!-- ✅ Overall total for all orders in selected table -->
            <div class="overall-total">
                <b>Overall Total:</b>
                <span>
                    ₹ @SelectedTable.Orders.Sum(o => o.GrandTotal)
                </span>
            </div>
        }
        else
        {
            <div class="placeholder">Select a table to view details</div>
        }
    </div>
</div>

@code {
    private TableModel SelectedTable;

    void SelectTable(TableModel table) => SelectedTable = table;

    public List<TableModel> Tables = new();

    protected override void OnInitialized()
    {
        Tables = new()
        {
            new TableModel
            {
                TableNo = "009",
                GuestType = "GUEST",
                Location = "RESTAURANT",
                Cover = 1,
                StewardId = "a",
                Orders = new()
                {
                    new OrderModel
                    {
                        BillNo = "RG1152855",
                        DateTime = DateTime.Now,
                        Items = new()
                        {
                            new OrderItem { Name = "FRIED FISH", Qty = 1, Amount = 343 },
                            new OrderItem { Name = "BUTTER NAAN", Qty = 2, Amount = 120 },
                        },
                        SubTotal = 463,
                        Tax = 20,
                        GrandTotal = 483
                    },
                    new OrderModel
                    {
                        BillNo = "RG1152856",
                        DateTime = DateTime.Now.AddMinutes(-30),
                        Items = new()
                        {
                            new OrderItem { Name = "CHICKEN TIKKA", Qty = 1, Amount = 220 },
                        },
                        SubTotal = 220,
                        Tax = 15,
                        GrandTotal = 235
                    }
                }
            },
            new TableModel
            {
                TableNo = "010",
                GuestType = "MEMBER",
                Location = "LOUNGE",
                Cover = 2,
                StewardId = "b",
                Orders = new()
                {
                    new OrderModel
                    {
                        BillNo = "RG1152857",
                        DateTime = DateTime.Now.AddMinutes(-15),
                        Items = new()
                        {
                            new OrderItem { Name = "MUTTON CURRY", Qty = 1, Amount = 480 },
                            new OrderItem { Name = "JEERA RICE", Qty = 1, Amount = 100 },
                        },
                        SubTotal = 580,
                        Tax = 30,
                        GrandTotal = 610
                    }
                }
            }
        };
    }

    public class TableModel
    {
        public string TableNo { get; set; }
        public string GuestType { get; set; }
        public string Location { get; set; }
        public short Cover { get; set; }
        public string StewardId { get; set; }
        public List<OrderModel> Orders { get; set; } = new();
    }

    public class OrderModel
    {
        public string BillNo { get; set; }
        public DateTime DateTime { get; set; }
        public List<OrderItem> Items { get; set; } = new();
        public decimal SubTotal { get; set; }
        public decimal Tax { get; set; }
        public decimal GrandTotal { get; set; }
    }

    public class OrderItem
    {
        public string Name { get; set; }
        public int Qty { get; set; }
        public decimal Amount { get; set; }
    }
} *@






@page "/running-table-orders"
@using HandHelUi.Shared.Models
@inject HttpClient Http
@inject IJSRuntime JS

<header class="removeBg">
    <div class="page-header">
        <h2>Running Table Orders</h2>
        <p>View all current running orders table-wise</p>
    </div>
</header>

<div class="panel-layout">
    <!-- Left Table List -->
    <div class="table-list">
        @if (Tables == null)
        {
            <p>Loading tables...</p>
        }
        else
        {
            @foreach (var table in Tables)
            {
                <div class="table-item @(SelectedTable == table ? "active" : "")"
                     @onclick="() => SelectTable(table)">
                    <b>Table - @table.RmscCod</b><br />
                    @* <small>@table.FloorDesc | @table.RmscTyp</small><br /> *@
                    <small>Cover: @table.RunCvr | Stw: @table.RunSTW</small><br />
                    <small>Amount: ₹ @table.TableAmt</small>
                </div>
            }
        }
    </div>

    <!-- Right Detail Panel -->
    <div class="details-panel">
        @if (IsLoadingOrders)
        {
            <div class="placeholder">Loading order details...</div>
        }
        else if (SelectedTableOrders != null && SelectedTableOrders.Any())
        {
            <div class="table-header">
                <h3>Table - @SelectedTable?.RmscCod</h3>
                <span>@SelectedTableOrders?.Select(o => o.OrderType).FirstOrDefault() | @SelectedTableOrders?.Select(p => p.PosName).FirstOrDefault()</span>
            </div>

            @foreach (var order in SelectedTableOrders)
            {
                <div class="order-block">
                    <div class="order-header">
                        <span>@order.RsomKot</span>
                        <span>@order.Date?.ToString("dd/MM/yyyy") | @order.RsumTim</span>
                        @* <span></span> *@
                    </div>

                    <div class="order-items">
                        <div class="order-item header-row">
                            <span>Item</span>
                            <span>Rate</span>
                            <span>Qty</span>
                            <span>Amount</span>
                        </div>

                        @foreach (var item in order.CartItem)
                        {
                            <div class="order-item">
                                <span>@item.ItemName</span>
                                <span>₹ @item.RkotRat</span>
                                <span>@item.Quantity</span>
                                <span>₹ @(@item.RkotRat * @item.Quantity)</span>
                            </div>
                        }
                    </div>

                    <div class="summary">
                        <div><b>Sub-Total</b><strong>₹ @order.TotalAmount</strong></div>
                        @* <div><b>Tax</b><span>₹ @order.Tax</span></div> *@
                    </div>
                </div>
            }

            <!-- Overall total -->
            <div class="grand-total">
                <b>Grand Total</b>
                <span>₹ @SelectedTableOrders.Sum(o => (decimal?)o.TotalAmount ?? 0)</span>
            </div>
        }
        else
        {
            <div class="placeholder bg-transparent">Select a table to view details</div>
        }
    </div>
</div>

@code {
    public string? OutletId { get; set; }
    private List<PfbRmscMst>? Tables;
    private PfbRmscMst? SelectedTable;
    private List<OrderItem>? SelectedTableOrders;
    private bool IsLoadingOrders = false;
    private bool _initialized = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            OutletId = await JS.InvokeAsync<string>("localStorage.getItem", "outletId");

            if (!string.IsNullOrEmpty(OutletId))
            {
                await LoadTablesAsync();
            }
            else
            {
                Console.WriteLine("No outletId found in localStorage");
            }

            _initialized = true;
            StateHasChanged();
        }
    }


    private async Task LoadTablesAsync()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<List<PfbRmscMst>>("api/CSATSU_RMS_TableStatus");

            if (response != null)
            {
                var CurrentHotelTable = response
                  .Where(t => t.OutletId == OutletId && t.RmscTblsts == "K")
                  .Distinct()
                  .OrderBy(t => t.RmscCod)
                  .ToList();

                Tables = CurrentHotelTable;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to load tables: {ex.Message}");
        }
    }

    private async Task SelectTable(PfbRmscMst table)
    {
        SelectedTable = table;
        IsLoadingOrders = true;
        SelectedTableOrders = null;

        try
        {
            SelectedTableOrders = await Http.GetFromJsonAsync<List<OrderItem>>($"api/CSATSU_RMS_LiveTableStatus/{table.RmscCod}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to load orders for table {table.RmscCod}: {ex.Message}");
        }
        finally
        {
            IsLoadingOrders = false;
        }
    }
}




<style>
    /* ===== BASE PAGE LAYOUT (No Page Scroll) ===== */
    html, body {
        height: 100%;
        margin: 0;
        overflow: hidden; /* No scroll for whole page */
    }

    /* ===== PAGE HEADER ===== */
    .removeBg {
        background: #ffffff;
        padding: 15px 15px 0px 15px;
    }

    .page-header {
        background: linear-gradient(90deg, #0078ff, #00b4d8);
        color: white;
        text-align: center;
        padding: 1rem;
        border-radius: 10px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

        .page-header h2 {
            margin: 0;
            font-weight: 700;
            font-size: 1.5rem;
        }

        .page-header p {
            margin: 0;
            opacity: 0.9;
            font-size: 0.9rem;
        }

    /* ===== PANEL LAYOUT ===== */
    .panel-layout {
        display: grid;
        grid-template-columns: 1fr 2fr;
        height: calc(100vh - 217px); /* adjust to header height */
        overflow: hidden; /* no page scroll */
    }

    /* ===== LEFT & RIGHT SCROLL PANELS ===== */
    .table-list,
    .details-panel {
        overflow-y: auto;
        scrollbar-width: none; /* Firefox */
        -ms-overflow-style: none; /* IE/Edge */
    }

        .table-list::-webkit-scrollbar,
        .details-panel::-webkit-scrollbar {
            display: none; /* Chrome, Safari */
        }

    /* ===== LEFT PANEL ===== */
    .table-list {
        background: #f8f8f8;
        padding: 1rem;
        border-right: 1px solid #ddd;
    }

    .table-item {
        background: white;
        border-radius: 10px;
        padding: 0.8rem;
        margin-bottom: 0.6rem;
        cursor: pointer;
        transition: 0.2s;
        box-shadow: 0 1px 3px rgba(0,0,0,0.08);
    }

    .table-item small {
            font-weight: 600;
    }
    

        .table-item:hover {
            background: #eef6ff;
        }

        .table-item.active {
            border-left: 4px solid #0078ff;
            background: #e8f2ff;
        }

    /* ===== RIGHT PANEL ===== */
    .details-panel {
        background: #ffffff;
        padding: 1rem;
    }

    .table-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        background: #f3f8ff;
        border-radius: 10px;
        padding: 0.6rem 1rem;
        margin-bottom: 1rem;
        font-weight: 600;
    }

    /* ===== ORDER BLOCKS ===== */
    .order-block {
        margin-bottom: 1rem;
        background: #f8faff;
        border-radius: 10px;
        padding: 0.6rem;
        box-shadow: 0 1px 4px rgba(0,0,0,0.05);
    }

    .order-header {
        background: linear-gradient(90deg, #0078ff, #2b9fff);
        color: white;
        padding: 0.4rem 0.6rem;
        border-radius: 8px;
        font-weight: 600;
        display: flex;
        justify-content: space-between;
    }

    .order-items {
        margin-top: 0.4rem;
        border-radius: 6px;
        overflow: hidden;
    }

    .order-item {
        display: grid;
        grid-template-columns: 1fr 100px 100px 60px;
        padding: 0.3rem 0.4rem;
        border-bottom: 1px solid #eaeaea;
    }

        .order-item.header-row {
            font-weight: 600;
            background: #f1f5fb;
        }

        .order-item span:last-child {
            text-align: right;
        }

    /* ===== ORDER SUMMARY ===== */
    .summary div {
        display: flex;
        justify-content: space-between;
        padding: 0.3rem 0.4rem;
    }

    @* .grand-total {
        background: linear-gradient(90deg, #00c46a, #00a95c);
        color: white;
        border-radius: 8px;
        padding: 0.4rem 0.5rem;
        margin-top: 0.3rem;
    } *@
    /* ===== OVERALL TOTAL ===== */
    .grand-total {
        display: flex;
        justify-content: space-between;
        background: linear-gradient(90deg, #00c46a, #00a95c);
        color: #fff;
        padding: 0.8rem 1rem;
        border-radius: 10px;
        font-size: 1.1rem;
        font-weight: 700;
        box-shadow: 0 2px 6px rgba(0,0,0,0.1);
        margin-top: 1.5rem;
    }

 

    /* ===== PLACEHOLDER ===== */
    .placeholder {
        text-align: center;
        @* color: #888; *@
        background: none;
        @* margin-top: 50px; *@
    }
    /* ===== RESPONSIVE ===== */
    @@media (max-width: 900px) {

        .panel-layout
        {
            grid-template-columns: 1fr;
            height: auto;
        }

        .table-list {
            border-right: none;
            border-bottom: 1px solid #ddd;
            margin-bottom: 1rem;
        }
    }
</style>


