@page "/RunningTableExplorer"
@using HandHelUi.Shared.Models
@inject HttpClient Http
@inject HttpClient Http
@inject IJSRuntime JS

<div class="table-container">
    <!-- Tabs -->
    <div class="tab-header">
        <button class="@GetTabClass("Occupied")" @onclick='() => SelectTab("Occupied")'>Occupied</button>
        <button class="@GetTabClass("Vacant")" @onclick='() => SelectTab("Vacant")'>Vacant</button>
        <button class="@GetTabClass("All")" @onclick='() => SelectTab("All")'>All</button>
    </div>

    <!-- Loading State -->
    @if (IsLoading)
    {
        <div class="loading">Loading tables...</div>
    }
    else if (HasError)
    {
        <div class="error">Failed to load data. Please try again.</div>
    }
    else
    {
        <!-- Table Data -->
        <div class="responsive-table">
            <table>
                <thead>
                    <tr>
                        <th>Table</th>
                        @if (SelectedTab == "Occupied")
                        {
                            <th>Outlet</th>
                            <th>Pos</th>
                            <th>Order No</th>
                            <th>Steward</th>
                            <th>Time</th>
                            <th>Cover</th>
                            <th>Qty</th>
                            <th>Rate</th>
                            <th>Name</th>
                            <th>Amount</th>
                        }
                        else if (SelectedTab == "All")
                        {
                            <th>Outlet</th>
                            <th>Pos</th>
                            <th>Order No</th>
                            <th>Status</th>
                            <th>Steward</th>
                            <th>Time</th>
                            <th>Cover</th>
                            <th>Qty</th>
                            <th>Rate</th>
                            <th>Name</th>
                            <th>Amount</th>
                        }
                        else
                        {
                            <th>Status</th>
                        }
                    </tr>
                </thead>

                <tbody>
                    @foreach (var table in FilteredTables)
                    {
                        <tr class="@GetRowClass(table)">
                            <td>@table.TableNo</td>

                            @if (SelectedTab == "Occupied")
                            {
                                <td>@table.Outlet</td>
                                <td>@table.PosNo</td>
                                <td>@table.OrderNo</td>
                                <td>@table.Steward</td>
                                <td>@table.Time</td>
                                <td>@table.Cover</td>
                                <td>@table.Quantity</td>
                                <td>@table.Rate</td>
                                <td>@table.ItemName</td>
                                <td>@table.Amount</td>
                            }
                            else if (SelectedTab == "All")
                            {
                                <td>@table.Outlet</td>
                                <td>@table.PosNo</td>
                                <td>@table.OrderNo</td>
                                <td>@table.Status</td>
                                <td>@table.Steward</td>
                                <td>@table.Time</td>
                                <td>@table.Cover</td>
                                <td>@table.Quantity</td>
                                <td>@table.Rate</td>
                                <td>@table.ItemName</td>
                                <td>@table.Amount</td>
                            }
                            else
                            {
                                <td>@table.Status</td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    private string SelectedTab = "Occupied";
    private bool IsLoading = true;
    private bool HasError = false;
    private string outletId = "";

    private List<TableInfo> OccupiedTables = new();
    private List<TableInfo> VacantTables = new();
    private List<TableInfo> AllTables = new();

    private IEnumerable<TableInfo> FilteredTables =>
        SelectedTab switch
        // {
        //     "Occupied" => OccupiedTables,
        //     "Vacant" => VacantTables,
        // _ => OccupiedTables.Concat(VacantTables
        //                    .Where(v => !OccupiedTables
        //                    .Any(o => o.TableNo == v.TableNo)))
        // };

        {
            "Occupied" => OccupiedTables,
            "Vacant" => VacantTables,
            _ => AllTables
        };

    protected override async Task OnInitializedAsync()
    {
        outletId = await JS.InvokeAsync<string>("localStorage.getItem", "outletId");
        await LoadTablesAsync();
    }

    private async Task LoadTablesAsync()
    {
        try
        {
            IsLoading = true;
            HasError = false;

            var response = await Http.GetFromJsonAsync<AllTableExplorer>($"api/CSATSU_RMS_ALLTableExplorer/{outletId}");

            if (response is not null)
            {
                // Occupied
                OccupiedTables = response.Occupied?.Select(o => new TableInfo
                {
                    TableNo = o.RsumTbl,
                    OrderNo = o.RkotNo,
                    PosNo = o.RkotPop,
                    Outlet = o.OutletId,
                    Status = "A",
                    Steward = o.RsumStw,
                    Time = o.RsumTim,
                    Cover = o.RsumCvr,
                    Quantity = o.RkotQty,
                    Rate = o.RkotRat,
                    ItemName = o.ItemName,
                    Amount = o.Amount
                }).ToList() ?? new();

                // Vacant
                VacantTables = response.Vacant?.Select(v => new TableInfo
                {
                    TableNo = v.TableNo,
                    Status = v.Status
                }).ToList() ?? new();

                // Merge for "All" without duplicates
                AllTables = OccupiedTables
                    .Concat(VacantTables
                        .Where(v => !OccupiedTables.Any(o => o.TableNo == v.TableNo))) // exclude duplicates
                    .ToList();
            }
        }
        catch (Exception ex)
        {
            HasError = true;
            Console.WriteLine(" Error loading table data: " + ex.Message);
        }
        finally
        {
            IsLoading = false;
        }
    }

    private void SelectTab(string tab) => SelectedTab = tab;

    private string GetTabClass(string tab) =>
        $"tab-btn {(SelectedTab == tab ? "active" : "")}";

    private string GetRowClass(TableInfo table) =>
        table.Status == "A" ? "status-active" : "status-inactive";

}

<style>
    .table-container {
        background: #ffffff;
        border-radius: 16px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);
        overflow: hidden;
        margin: 10px;
        display: flex;
        flex-direction: column;
        height: 80vh; /*  fixed overall height */
    }

    .tab-header {
        display: flex;
        justify-content: flex-start;
        border-bottom: 2px solid #f0f0f0;
        background: #fafafa;
        padding: 0.5rem 1rem;
        gap: 0.5rem;
        position: sticky;
        top: 0;
        z-index: 2;
    }

    .tab-btn {
        background: transparent;
        border: none;
        padding: 0.6rem 1.2rem;
        font-weight: 600;
        color: #555;
        border-radius: 8px;
        cursor: pointer;
        transition: 0.2s;
    }

        .tab-btn.active {
            background: #0078ff;
            color: white;
            box-shadow: 0 2px 5px rgba(0, 120, 255, 0.3);
        }

        .tab-btn:hover {
            background: rgba(0, 120, 255, 0.1);
        }

    .responsive-table {
        width: 100%;
        overflow-y: auto; /* 👈 scroll only data */
        flex-grow: 1; /* fills remaining height */
    }

    table {
        width: 100%;
        border-collapse: collapse;
        font-size: 0.9rem;
        min-width: 800px;
    }

    thead {
        position: sticky; /* 👈 keep header fixed */
        top: 0;
        z-index: 1;
    }

    th {
        background: #0078ff;
        color: white;
        text-align: left;
        padding: 0.7rem;
        font-weight: 600;
        white-space: nowrap;
    }

    td {
        padding: 0.6rem;
        border-bottom: 1px solid #eee;
        color: #333;
    }

    /* Zebra (alternate row) colors */
    tbody tr:nth-child(odd) {
        background-color: #f9fafc;
    }

    tbody tr:nth-child(even) {
        background-color: #ffffff;
    }

    /* Hover effect */
    tbody tr:hover {
        background-color: #eaf3ff;
        transition: 0.2s;
    }

    .status-active {
        color: #0078ff;
        font-weight: 600;
    }

    .status-inactive {
        color: #999;
    }

    /* Responsive tweaks */
    @@media (max-width: 768px) {
        table {
            font-size: 0.8rem;
            min-width: 600px;
        }

        .tab-btn {
            padding: 0.4rem 0.8rem;
            font-size: 0.85rem;
        }
    }

    @@media (max-width: 480px) {
        th, td {
            padding: 0.4rem;
        }
    }

</style>

