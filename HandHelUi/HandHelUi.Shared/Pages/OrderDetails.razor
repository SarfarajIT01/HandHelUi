@page "/bill"
@using HandHelUi.Shared.Models
@using Microsoft.AspNetCore.Components
@using System.Text.Json
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IJSRuntime JS

<div class="bill-page">
    <!-- Header -->
    <div class="bill-header">
        @if (tableDetails != null)
        {
            <div><strong>Bill No:</strong> @tableDetails.NextBill</div>
            <div><strong>Time:</strong> @tableDetails.RSUM_TIM</div>
            <div><strong>Table No:</strong> @tableDetails.RSUM_TBL</div>
            <div><strong>Stw:</strong> @tableDetails.RSUM_STW</div>
            <div><strong>Total Qty:</strong> @orderData?.Sum(r => r.RkotQty)</div>
            <div><strong>Cvr:</strong> @tableDetails.RSUM_CVR</div>
            <div><strong>User:</strong> @tableDetails.RSUM_CSH</div>
        }
    </div>

    <!-- Orders Table -->
    <div class="order-table">
        <div class="order-row header">
            <div>Order No</div>
            <div>Item Name</div>
            <div>Qty</div>
            <div>Rate</div>
            <div>Amt</div>
        </div>
        @if (orderData != null)
        {
            @foreach (var item in orderData)
            {
                <div class="order-row">
                    <div>@item.RkotNo</div>
                    <div>@item.ItemName</div>
                    <div style="margin-left:6px;">@item.RkotQty</div>
                    <div>@item.RkotRat</div>
                    <div>@item.FnlBaseVal</div>
                </div>
            }
        }
    </div>

    <!-- Test Charges + Summary -->
    <div class="test-charges">
        <!-- Left: Test Charge Options -->
        <div class="charges-left">
            <label><input type="checkbox" /> Test Charge 10%</label>
            <label><input type="checkbox" /> Test Charge 5%</label>
            <label><input type="checkbox" /> Test Charge 7%</label>
            <label><input type="checkbox" /> Test Charge 0%</label>
            <label class="custom-charge">
                <input type="checkbox" /> Custom
                <input type="number" min="0" value="0" /> %
            </label>
        </div>

        @if (orderData != null)
        {
            <!-- Right: Summary -->
            <div class="charges-summary">
                <div class="summary-row">
                    <span>SubTotal</span>
                    <span>@orderData.Sum(t => t.FnlBaseVal)</span>
                </div>
                <div class="summary-row">
                    <span>Discount</span>
                    <span>@discount</span>
                </div>
                <div class="summary-row">
                    <span>Tax</span>
                    <span>@orderData.Sum(tax => tax.RkotTax)</span>
                </div>
                <div class="summary-row total">
                    <span>Total</span>
                    <span>@orderData.Sum(tax => tax.RkotTax + tax.FnlBaseVal) - discount</span>
                </div>
            </div>
        }
    </div>

    <!-- Actions -->
    <div class="bill-actions">
        <button class="secondary-btn">Others</button>
        <button class="primary-btn" @onclick="() => GenerateBill()">Generate Bill</button>
    </div>

    <!-- Discount Remark Modal -->
    @if (showDiscountRemark)
    {
        <div class="modal-overlay">
            <div class="modal-content">
                <h2 class="modal-title">Enter Discount Remark</h2>
                <input type="text" @bind="discountReason" placeholder="Enter reason..." class="modal-input" />

                <div class="modal-actions">
                    <button class="btn-cancel" @onclick="CloseDiscountModal">Cancel</button>
                    <button class="btn-confirm" @onclick="ConfirmDiscount">Confirm</button>
                </div>
            </div>
        </div>
    }

    <!-- Confirmation Modal -->
    @if (showConfirm)
    {
        <div class="modal-overlay">
            <div class="modal-content">
                <h2 class="modal-title">Generate Bill</h2>
                <p class="modal-text">Are you sure you want to generate bill?</p>

                <div class="modal-actions">
                    <button class="btn-cancel" @onclick="() => { showConfirm = false; }">No</button>
                    <button class="btn-confirm" @onclick="GenBill">Yes</button>
                </div>
            </div>
        </div>
    }
    <!-- bill genrating Modal -->
    @if (isGenerating)
    {
        <div class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
            <div class="bg-white p-6 rounded-xl shadow-xl text-center">
                <h3 class="text-lg font-bold">Generating Bill...</h3>
                <div class="mt-3">
                    <div class="animate-spin rounded-full h-10 w-10 border-b-4 border-blue-600 mx-auto"></div>
                </div>
            </div>
        </div>
    }


</div>

@code {
    private string? tableNumber;
    private importaintTableDetail? tableDetails;
    private List<PfbRkotTrnDto>? orderData;

    private bool showDiscountRemark = false;
    private bool showConfirm = false;
    private bool isGenerating = false;
    private string discountReason = "";
    private int discount = 0;

    [Parameter]
    [SupplyParameterFromQuery]
    public string? TableNo { get; set; }

    protected override void OnParametersSet()
    {
        if (!string.IsNullOrEmpty(TableNo))
        {
            tableDetails = null;
            orderData = null;
            tableNumber = TableNo;
            _ = LoadTableDetails();
            _ = LoadOrderData();
        }
    }

    private async Task LoadTableDetails()
    {
        try
        {
            var pos = await GetPosCode();
            var response = await Http.GetAsync($"api/ImportaintTableDetails/GetByID/{tableNumber}/{pos}/T");
            if (response.IsSuccessStatusCode)
            {
                tableDetails = await response.Content.ReadFromJsonAsync<importaintTableDetail>();
            }
        }
        catch (Exception ex) { Console.WriteLine($"Error loading table details: {ex.Message}"); }
        finally { StateHasChanged(); }
    }

    private async Task LoadOrderData()
    {
        try
        {
            var pos = await GetPosCode();
            var response = await Http.GetAsync($"api/CSATSU_RMS_GetOrderData/{tableNumber}/{pos}");
            if (response.IsSuccessStatusCode)
            {
                orderData = await response.Content.ReadFromJsonAsync<List<PfbRkotTrnDto>>() ?? new();
            }
        }
        catch (Exception ex) { Console.WriteLine($"Error loading order data: {ex.Message}"); }
        finally { StateHasChanged(); }
    }

    private async Task GenerateBill()
    {
        try
        {
            var response = await Http.GetAsync($"api/GetOrderTypeForBillGen/GetById/{tableNumber}");
            if (!response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("alert", "Can't fetch order type");
                return;
            }

            var data = await response.Content.ReadFromJsonAsync<List<string>>();
            if (data != null && data.Count > 0 && data[0] == "COMP")
            {
                // COMP flow
                Navigation.NavigateTo($"/comp?TableNo={tableNumber}");
                return;
            }

            // Check discount logic
            if (/* check your discount condition */ false)
            {
                showDiscountRemark = true;
            }
            else
            {
                showConfirm = true;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in GenerateBill: {ex.Message}");
        }
    }

    private void CloseDiscountModal()
    {
        showDiscountRemark = false;
        discountReason = "";
    }

    private void ConfirmDiscount()
    {
        if (string.IsNullOrWhiteSpace(discountReason))
        {
            _ = JS.InvokeVoidAsync("alert", "Discount remark mandatory");
            return;
        }
        showDiscountRemark = false;
        showConfirm = true;
    }

    // private async Task GenBill()
    // {
    //     try
    //     {
    //         isGenerating = true;
    //         showConfirm = false;
    //         StateHasChanged();

    //         Step 1: Get Order Details
    //         var orderResponse = await Http.GetAsync($"api/CSATSU_RMS_RKOT_SUM/{tableNumber}");
    //         if (!orderResponse.IsSuccessStatusCode)
    //         {
    //             var msg = await orderResponse.Content.ReadAsStringAsync();
    //             await JS.InvokeVoidAsync("alert", msg);
    //             return;
    //         }

    //         var orderDetail = await orderResponse.Content.ReadFromJsonAsync<List<PfbRkotSumDto>>();
    //         var orderDetail = await orderResponse.Content.ReadFromJsonAsync<List<PfbRkotSumDto>>();
    //         if (orderDetail == null || orderDetail.Count == 0)
    //         {
    //             await JS.InvokeVoidAsync("alert", "Bill already generated or no order found.");
    //             return;
    //         }

    //         Step 2: Proceed to Generate Bill
    //         var pos = await GetPosCode();
    //         var response = await Http.PostAsJsonAsync("api/CSATSU_RMS_FinallBillGenerator", orderDetail);

    //         var response = await Http.PostAsJsonAsync("api/CSATSU_RMS_FinallBillGenerator", orderDetail);

    //         var response = await Http.PostAsJsonAsync("api/CSATSU_RMS_FinallBillGenerator", orderDetail);

    //         if (response.IsSuccessStatusCode)
    //         {
    //             var billNo = await response.Content.ReadAsStringAsync();
    //             await JS.InvokeVoidAsync("alert", $"Bill generated successfully! Bill No: {billNo}");
    //             Navigation.NavigateTo($"/finalbill?TableNo={tableNumber}");
    //         }
    //         else
    //         {
    //             await JS.InvokeVoidAsync("alert", "Failed to generate bill.");
    //         }
    //     }
    //     catch (Exception ex)
    //     {
    //         await JS.InvokeVoidAsync("alert", $"Error: {ex.Message}");
    //     }
    //     finally
    //     {
    //         isGenerating = false;
    //         StateHasChanged();
    //     }
    // }


    private async Task GenBill()
    {
        try
        {
            isGenerating = true;
            showConfirm = false;
            StateHasChanged();

            // Step 1: Get Order Details (RKOT Summary)
            var orderResponse = await Http.GetAsync($"api/CSATSU_RMS_RKOT_SUM/{tableNumber}");
            if (!orderResponse.IsSuccessStatusCode)
            {
                var msg = await orderResponse.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("alert", msg);
                return;
            }

            var orderDetail = await orderResponse.Content.ReadFromJsonAsync<List<PfbRkotSumDto>>();
            if (orderDetail == null || orderDetail.Count == 0)
            {
                await JS.InvokeVoidAsync("alert", "No order found or bill already generated.");
                return;
            }

            // Step 2: Create OrderData (the DTO your API expects)
            var pos = await GetPosCode();

            var orderData = new OrderDataDto
            {
                RBIL_TAXFREE = "n",
                Tbl = tableNumber,
                pos = pos,
                Stw = orderDetail.FirstOrDefault()?.RsumStw ?? "",
                Amount = (int)orderDetail.Sum(o => o.FnlBaseVal ?? 0),
                TotalTax = (float)orderDetail.Sum(o => (o.RkotTax ?? 0)),
                RBIL_TAMT = 0,
                RBIL_TOTAL = 0,
                RBIL_STX = 0,
                RBIL_OTX = 0,
                RBIL_DC1 = 0,
                RBIL_CVCHR2 = 0,
                RBIL_ROUND = 0,
                RBIL_TaxableDisc = 0,
                run_date = DateTime.Now.ToString("yyyy-MM-dd"),
                odrem = "Bill generation from handheld",
                odtype = "N",
                G_Code = "G001",
                G_Name = "Guest",
                flag = "F",
                token = "",
                TaxStructure = new List<TaxStructure>(),
                TaxStructure2 = new List<TaxStructure2>(),
                TaxStructureGroupWise = new List<TaxStructureGroupWise>(),

                // Fill item data from RKOT summary
                RKOT_TRN_DATA = orderDetail.Select(o => new RKOT_TRN_DATA
                {
                    RKOT_NO = o.RkotNo ?? "",
                    ItemCode = o.ItemName ?? "",
                    DiscountPer = o.RkotDisc?.ToString() ?? "0",
                    RKOT_SNO = o.RkotSno?.ToString() ?? "0"
                }).ToList(),

                // Optional blank lists
                ItemCode = new(),
                StrQty = new(),
                ItemRemark = new(),
                strAddon = new(),
                strModi = new(),
                strCombo = new(),
                strHappy = new(),
                strdisc = new(),
                sub_item = new(),
                cover_item = new(),
                meal_item = new(),
            };

            // Step 3: POST to Bill Generator API
            var response = await Http.PostAsJsonAsync("api/CSATSU_RMS_FinallBillGenerator", orderData);

            if (response.IsSuccessStatusCode)
            {
                var billNo = await response.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("alert", $"Bill generated successfully! Bill No: {billNo}");
                Navigation.NavigateTo($"/finalbill?TableNo={tableNumber}");
            }
            else
            {
                var msg = await response.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("alert", $"Failed to generate bill.\n{msg}");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
        finally
        {
            isGenerating = false;
            StateHasChanged();
        }
    }



    private async Task<string> GetPosCode() => "001"; // stub
}


<style scoped>
    /* Test Charges Section with Grid */
    .test-charges {
        background: #fff;
        padding: 20px;
        border-radius: 10px;
        margin-top: 20px;
        margin-bottom: 20px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.05);
        display: grid;
        grid-template-columns: 2.5fr 1fr; /* Left bigger, right smaller */
        /* grid-template-columns: 1.5fr 1fr; */
        gap: 20px;
        width: 100%;    
    }

    /* Left (Checkboxes) */
    .charges-left {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }


        .charges-left label {
            font-size: 14px;
            display: flex;
            align-items: center;
            gap: 6px;
        }

    /* Right (Summary in 2-column format) */
    .charges-summary {
        background: #f9fafb;
        padding: 14px 18px;
        border-radius: 8px;
        font-size: 15px;
        box-shadow: inset 0 1px 4px rgba(0,0,0,0.05);
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

    .summary-row {
        display: flex;
        justify-content: space-between; /* label left, value right */
        font-weight: 500;
    }

        .summary-row.total {
            font-weight: 700;
            font-size: 16px;
            border-top: 1px solid #eee;
            padding-top: 8px;
        }

        .charges-summary p {
            margin: 6px 0;
        }

/* Page Layout */
.bill-page {
    width: 100%;
    min-height: 150vh;
    /* background: #f9fafb; */
    padding: 20px;
    font-family: 'Segoe UI', sans-serif;
    color: #333;
}

/* Header */
.bill-header {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
    background: #2563eb;
    color: #fff;
    padding: 14px 20px;
    border-radius: 10px;
    margin-bottom: 20px;
    font-size: 15px;
}

/* Orders Table */
.order-table {
    display: grid;
    grid-template-columns: 1fr 2.3fr 0.7fr 0.7fr 0.4fr;
    /* grid-template-columns: 1fr 2fr 0.6fr 0.7fr 0.8fr; */
    font-size: 14px;
    background: #fff;
    border-radius: 10px;
    overflow: hidden;
    box-shadow: 0 2px 8px rgba(0,0,0,0.05);
}
.order-row {
    display: contents;
}
.order-row > div {
    padding: 12px;
    border-bottom: 1px solid #eee;
}
.order-row.header > div {
    background: #f1f5f9;
    font-weight: bold;
    border-bottom: 2px solid #ddd;
}

/* Summary */
.bill-summary {
    display: flex;
    justify-content: space-between;
    margin: 20px 0;
    padding: 16px 20px;
    background: #fff;
    border-radius: 10px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.05);
    font-size: 15px;
}

.test-charges label {
    font-size: 14px;
    display: flex;
    align-items: center;
    gap: 6px;
}
.test-charges .custom-charge input[type="number"] {
    width: 60px;
    padding: 4px 6px;
    border: 1px solid #ccc;
    border-radius: 6px;
}

/* Actions */
.bill-actions {
    display: flex;
    justify-content: flex-end;
    gap: 14px;
}
.primary-btn, .secondary-btn {
    padding: 12px 20px;
    border-radius: 8px;
    font-size: 14px;
    font-weight: 600;
    cursor: pointer;
    border: none;
    transition: all 0.2s ease;
}
.primary-btn {
    background: #2563eb;
    color: white;
}
.primary-btn:hover {
    background: #1e4fc3;
}
.secondary-btn {
    background: #f3f4f6;
    color: #333;
}
.secondary-btn:hover {
    /* background: #e5e7eb; */
    background: white;
}


    /* Overlay */
    .modal-overlay {
        position: fixed;
        inset: 0;
        background: rgba(0,0,0,0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }

    /* Modal Box */
    .modal-content {
        background: #fff;
        border-radius: 14px;
        padding: 24px 28px;
        width: 400px;
        max-width: 90%;
        box-shadow: 0 6px 18px rgba(0,0,0,0.2);
        animation: fadeInScale 0.25s ease;
        text-align: center;
    }

    /* Title & Text */
    .modal-title {
        font-size: 20px;
        font-weight: 700;
        margin-bottom: 14px;
        color: #111827;
    }

    .modal-text {
        font-size: 15px;
        color: #4b5563;
        margin-bottom: 20px;
    }

    /* Input */
    .modal-input {
        width: 100%;
        padding: 10px 12px;
        border: 1px solid #d1d5db;
        border-radius: 8px;
        font-size: 14px;
        margin-bottom: 18px;
    }

    /* Actions */
    .modal-actions {
        display: flex;
        justify-content: flex-end;
        gap: 12px;
    }

    .btn-cancel, .btn-confirm {
        padding: 10px 18px;
        border-radius: 8px;
        font-weight: 600;
        font-size: 14px;
        cursor: pointer;
        border: none;
        transition: background 0.2s ease;
    }

    .btn-cancel {
        background: #f3f4f6;
        color: #374151;
    }

        .btn-cancel:hover {
            background: #e5e7eb;
        }

    .btn-confirm {
        background: #2563eb;
        color: white;
    }

        .btn-confirm:hover {
            background: #1e4fc3;
        }

    /* Animation */
    @@keyframes fadeInScale {
        from

    {
        transform: scale(0.95);
        opacity: 0;
    }

    to {
        transform: scale(1);
        opacity: 1;
    }

    }
</style>


