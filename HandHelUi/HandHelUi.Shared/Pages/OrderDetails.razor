@page "/bill"
@using HandHelUi.Shared.Models
@using Microsoft.AspNetCore.Components
@using System.Text.Json
@inject NavigationManager Navigation
@inject HttpClient Http

<div class="bill-page">
    <!-- Header -->
    <div class="bill-header">
        @if (tableDetails != null)
        {
            <div><strong>Bill No:</strong> @tableDetails.NextBill</div>
            <div><strong>Time:</strong> @tableDetails.RSUM_TIM</div>
            <div><strong>Table No:</strong> @tableDetails.RSUM_TBL</div>
            <div><strong>Stw:</strong> @tableDetails.RSUM_STW</div>
            <div><strong>Total Qty:</strong> @orderData?.Sum(r => r.RkotQty)</div>
            <div><strong>Cvr:</strong> @tableDetails.RSUM_CVR</div>
            <div><strong>User:</strong> @tableDetails.RSUM_CSH</div>
        }
    </div>

    <!-- Orders Table -->
    <div class="order-table">
        <div class="order-row header">
            <div>Order No</div>
            <div>Item Name</div>
            <div>Qty</div>
            <div>Rate</div>
            <div>Amt</div>
        </div>
        @if (orderData !=null)
        {
            @foreach (var item in orderData)
            {
                <div class="order-row">
                    <div>@item.RkotNo</div>
                    <div>@item.ItemName</div>
                    <div>@item.RkotQty</div>
                    <div>@item.RkotRat</div>
                    <div>@item.FnlBaseVal</div>
                </div>
            }
        }
    </div>



<!-- Test Charges + Summary -->
<div class="test-charges">
    <!-- Left: Test Charge Options -->
    <div class="charges-left">
        <label>
            <input type="checkbox" /> Test Charge 10% (69) = 789
        </label>
        <label>
            <input type="checkbox" /> Test Charge 5% (34) = 754
        </label>
        <label>
            <input type="checkbox" /> Test Charge 7% (48) = 768
        </label>
        <label>
            <input type="checkbox" /> Test Charge 0% (0) = 720
        </label>
        <label class="custom-charge">
            <input type="checkbox" /> Test Charge
            <input type="number" min="0" value="0" /> % = 720
        </label>
    </div>

    @if (orderData !=null)
    {
        <!-- Right: Summary -->
        <div class="charges-summary">
            <div class="summary-row">
                <span>SubTotal</span>
                    <span>@orderData.Sum(t => t.FnlBaseVal)</span>
            </div>
            <div class="summary-row">
                <span>Discount</span>
                <span>0</span>
            </div>
            <div class="summary-row">
                <span>Tax</span>
                <span>@orderData.Sum(tax => tax.RkotTax)</span>
            </div>
            <div class="summary-row total">
                <span>Total</span>
                    <span>@orderData.Sum(tax => tax.RkotTax + tax.FnlBaseVal)</span>
            </div>
        </div>
    }
</div>

    <!-- Actions -->
    <div class="bill-actions">
        <button class="secondary-btn">Others</button>
        <button class="primary-btn">Generate Bill</button>
    </div>
</div>

@code {
    private string? tableNumber;
    private importaintTableDetail? tableDetails;
    private List<PfbRkotTrnDto>? orderData;

    [Parameter]
    [SupplyParameterFromQuery]
    public string? TableNo { get; set; }

    protected override void OnParametersSet()
    {
        if (!string.IsNullOrEmpty(TableNo))
        {
            tableDetails = null;
            orderData = null;
            tableNumber = TableNo;
            _ = LoadTableDetails();
            _ = LoadOrderData();
        }
    }

    private async Task LoadTableDetails()
    {
        try
        {
            tableDetails = null;
            StateHasChanged();

            var pos = await GetPosCode();

            var response = await Http.GetAsync($"api/ImportaintTableDetails/GetByID/{tableNumber}/{pos}/T");

            if (response.IsSuccessStatusCode)
            {
                tableDetails = await response.Content.ReadFromJsonAsync<importaintTableDetail>();
            }
            else
            {
                // If open table not found, try billed tables
                // response = await Http.GetAsync($"api/ImportaintTableDetails/GetBillByID/{tableNumber}/{pos}");
                // if (response.IsSuccessStatusCode)
                // {
                //     tableDetails = await response.Content.ReadFromJsonAsync<importaintTableDetail>();
                // }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading table details: {ex.Message}");
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async Task LoadOrderData()
    {
        try
        {
            orderData = null;
            StateHasChanged();

            var pos = await GetPosCode();

            var response = await Http.GetAsync($"api/CSATSU_RMS_GetOrderData/{tableNumber}/{pos}");

            if (response.IsSuccessStatusCode)
            {
                var newData = await response.Content.ReadFromJsonAsync<List<PfbRkotTrnDto>>();

                if (newData != null)
                    orderData = newData;
                else
                    orderData = new List<PfbRkotTrnDto>(); // ensure it's not null
            }
            else
            {
                orderData = new List<PfbRkotTrnDto>(); // reset to empty list
                Console.WriteLine($"API call failed: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            orderData = new List<PfbRkotTrnDto>(); // prevent mixing old data
            Console.WriteLine($"Error loading order data: {ex.Message}");
        }
        finally
        {
            StateHasChanged();
        }
    }


    private async Task<string> GetPosCode()
    {
      
        return "001"; // Default value
    }
}

<style scoped>
    /* Test Charges Section with Grid */
    .test-charges {
        background: #fff;
        padding: 20px;
        border-radius: 10px;
        margin-top: 20px;
        margin-bottom: 20px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.05);
        display: grid;
        grid-template-columns: 2.5fr 1fr; /* Left bigger, right smaller */
        /* grid-template-columns: 1.5fr 1fr; */
        gap: 20px;
        width: 100%;    
    }

    /* Left (Checkboxes) */
    .charges-left {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }


        .charges-left label {
            font-size: 14px;
            display: flex;
            align-items: center;
            gap: 6px;
        }

    /* Right (Summary in 2-column format) */
    .charges-summary {
        background: #f9fafb;
        padding: 14px 18px;
        border-radius: 8px;
        font-size: 15px;
        box-shadow: inset 0 1px 4px rgba(0,0,0,0.05);
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

    .summary-row {
        display: flex;
        justify-content: space-between; /* label left, value right */
        font-weight: 500;
    }

        .summary-row.total {
            font-weight: 700;
            font-size: 16px;
            border-top: 1px solid #eee;
            padding-top: 8px;
        }

        .charges-summary p {
            margin: 6px 0;
        }

/* Page Layout */
.bill-page {
    width: 100%;
    min-height: 150vh;
    /* background: #f9fafb; */
    padding: 20px;
    font-family: 'Segoe UI', sans-serif;
    color: #333;
}

/* Header */
.bill-header {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
    background: #2563eb;
    color: #fff;
    padding: 14px 20px;
    border-radius: 10px;
    margin-bottom: 20px;
    font-size: 15px;
}

/* Orders Table */
.order-table {
    display: grid;
    grid-template-columns: 1fr 2.3fr 0.7fr 0.7fr 0.4fr;
    /* grid-template-columns: 1fr 2fr 0.6fr 0.7fr 0.8fr; */
    font-size: 14px;
    background: #fff;
    border-radius: 10px;
    overflow: hidden;
    box-shadow: 0 2px 8px rgba(0,0,0,0.05);
}
.order-row {
    display: contents;
}
.order-row > div {
    padding: 12px;
    border-bottom: 1px solid #eee;
}
.order-row.header > div {
    background: #f1f5f9;
    font-weight: bold;
    border-bottom: 2px solid #ddd;
}

/* Summary */
.bill-summary {
    display: flex;
    justify-content: space-between;
    margin: 20px 0;
    padding: 16px 20px;
    background: #fff;
    border-radius: 10px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.05);
    font-size: 15px;
}

.test-charges label {
    font-size: 14px;
    display: flex;
    align-items: center;
    gap: 6px;
}
.test-charges .custom-charge input[type="number"] {
    width: 60px;
    padding: 4px 6px;
    border: 1px solid #ccc;
    border-radius: 6px;
}

/* Actions */
.bill-actions {
    display: flex;
    justify-content: flex-end;
    gap: 14px;
}
.primary-btn, .secondary-btn {
    padding: 12px 20px;
    border-radius: 8px;
    font-size: 14px;
    font-weight: 600;
    cursor: pointer;
    border: none;
    transition: all 0.2s ease;
}
.primary-btn {
    background: #2563eb;
    color: white;
}
.primary-btn:hover {
    background: #1e4fc3;
}
.secondary-btn {
    background: #f3f4f6;
    color: #333;
}
.secondary-btn:hover {
    /* background: #e5e7eb; */
    background: white;
}
</style>


