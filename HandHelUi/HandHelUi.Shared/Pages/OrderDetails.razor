@page "/bill"
@using HandHelUi.Shared.Models
@using Microsoft.AspNetCore.Components
@using System.Text.Json
@using System.Globalization
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IJSRuntime JS

<div class="bill-page">
    <!-- Header -->
    <div class="bill-header">
        @if (tableDetails != null)
        {
            <div><strong>Bill No:</strong> @tableDetails.NextBill</div>
            <div><strong>Time:</strong> @tableDetails.RSUM_TIM</div>
            <div><strong>Table No:</strong> @tableDetails.RSUM_TBL</div>
            <div><strong>Stw:</strong> @tableDetails.RSUM_STW</div>
            <div><strong>Total Qty:</strong> @itemData?.Sum(r => r.RkotQty)</div>
            <div><strong>Cvr:</strong> @tableDetails.RSUM_CVR</div>
            <div><strong>User:</strong> @tableDetails.RSUM_CSH</div>
        }
    </div>

    <!-- Orders Table -->
    <div class="order-table">
        <div class="order-row header">
            <div>Order No</div>
            <div>Item Name</div>
            <div>Qty</div>
            <div>Rate</div>
            <div>Amt</div>
        </div>
        @if (itemData != null)
        {
            @foreach (var item in itemData)
            {
                <div class="order-row">
                    <div>@item.RkotNo</div>
                    <div>@item.ItemName</div>
                    <div style="margin-left:6px;">@item.RkotQty</div>
                    <div>@item.RkotRat</div>
                    <div>@item.FnlBaseVal</div>
                </div>
            }
        }
    </div>

    <!-- Test Charges + Summary -->
    <div class="test-charges">
        <!-- Left: Test Charge Options -->
        <div class="charges-left">
            <label><input type="checkbox" /> Test Charge 10%</label>
            <label><input type="checkbox" /> Test Charge 5%</label>
            <label><input type="checkbox" /> Test Charge 7%</label>
            <label><input type="checkbox" /> Test Charge 0%</label>
            <label class="custom-charge">
                <input type="checkbox" /> Custom
                <input type="number" min="0" value="0" /> %
            </label>
        </div>

        @if (itemData != null)
        {
            <!-- Right: Summary -->
            <div class="charges-summary">
                <div class="summary-row">
                    <span>SubTotal</span>
                    <span>@itemData.Sum(t => t.FnlBaseVal)</span>
                </div>
                <div class="summary-row">
                    <span>Discount</span>
                    <span>@discount</span>
                </div>
                <div class="summary-row">
                    <span>Tax</span>
                    <span>@itemData.Sum(tax => tax.RkotTax)</span>
                </div>
                <div class="summary-row total">
                    <span>Total</span>
                    <span>@itemData.Sum(tax => tax.RkotTax + tax.FnlBaseVal) - discount</span>
                </div>
            </div>
        }
    </div>

    <!-- Actions -->
    <div class="bill-actions">
        <button class="secondary-btn">Others</button>
        <button class="primary-btn" @onclick="() => GenerateBill()">Generate Bill</button>
    </div>

    <!-- Discount Remark Modal -->
    @if (showDiscountRemark)
    {
        <div class="modal-overlay">
            <div class="modal-content">
                <h2 class="modal-title">Enter Discount Remark</h2>
                <input type="text" @bind="discountReason" placeholder="Enter reason..." class="modal-input" />

                <div class="modal-actions">
                    <button class="btn-cancel" @onclick="CloseDiscountModal">Cancel</button>
                    <button class="btn-confirm" @onclick="ConfirmDiscount">Confirm</button>
                </div>
            </div>
        </div>
    }

    <!-- Confirmation Modal -->
    @if (showConfirm)
    {
        <div class="modal-overlay">
            <div class="modal-content">
                <h2 class="modal-title">Generate Bill</h2>
                <p class="modal-text">Are you sure you want to generate bill?</p>

                <div class="modal-actions">
                    <button class="btn-cancel" @onclick="() => { showConfirm = false; }">No</button>
                    <button class="btn-confirm" @onclick="GenBill">Yes</button>
                </div>
            </div>
        </div>
    }
    <!-- bill genrating Modal -->
    @if (isGenerating)
    {
        <div class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
            <div class="bg-white p-6 rounded-xl shadow-xl text-center">
                <h3 class="text-lg font-bold">Generating Bill...</h3>
                <div class="mt-3">
                    <div class="animate-spin rounded-full h-10 w-10 border-b-4 border-blue-600 mx-auto"></div>
                </div>
            </div>
        </div>
    }


</div>

@code {
    private string? tableNumber;
    private importaintTableDetail? tableDetails;
    private List<PfbRkotTrnDto>? itemData;

    private bool showDiscountRemark = false;
    private bool showConfirm = false;
    private bool isGenerating = false;
    private string discountReason = "";
    private int discount = 0;

    // Per-bill GST tax rules cache
    private readonly Dictionary<string, List<TaxRuleDto>> _taxRuleCache = new(StringComparer.OrdinalIgnoreCase);

    [Parameter]
    [SupplyParameterFromQuery]
    public string? TableNo { get; set; }

    protected override void OnParametersSet()
    {
        if (!string.IsNullOrEmpty(TableNo))
        {
            tableDetails = null;
            itemData = null;
            tableNumber = TableNo;
            _ = LoadTableDetails();
            _ = LoadOrderData();
        }
    }

    private async Task LoadTableDetails()
    {
        try
        {
            var pos = await GetPosCode();
            var response = await Http.GetAsync($"api/ImportaintTableDetails/GetByID/{tableNumber}/{pos}/T");
            if (response.IsSuccessStatusCode)
            {
                tableDetails = await response.Content.ReadFromJsonAsync<importaintTableDetail>();
            }
        }
        catch (Exception ex) { Console.WriteLine($"Error loading table details: {ex.Message}"); }
        finally { StateHasChanged(); }
    }

    private async Task LoadOrderData()
    {
        try
        {
            var pos = await GetPosCode();
            var response = await Http.GetAsync($"api/CSATSU_RMS_GetOrderData/{tableNumber}/{pos}");
            if (response.IsSuccessStatusCode)
            {
                itemData = await response.Content.ReadFromJsonAsync<List<PfbRkotTrnDto>>() ?? new();
            }
        }
        catch (Exception ex) { Console.WriteLine($"Error loading order data: {ex.Message}"); }
        finally { StateHasChanged(); }
    }

    private async Task GenerateBill()
    {
        try
        {
            var response = await Http.GetAsync($"api/GetOrderTypeForBillGen/GetById/{tableNumber}");
            if (!response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("alert", "Can't fetch order type");
                return;
            }

            var data = await response.Content.ReadFromJsonAsync<List<string>>();
            if (data != null && data.Count > 0 && data[0] == "COMP")
            {
                Navigation.NavigateTo($"/comp?TableNo={tableNumber}");
                return;
            }

            // Example toggle for remarks flow
            if (false)
            {
                showDiscountRemark = true;
            }
            else
            {
                showConfirm = true;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in GenerateBill: {ex.Message}");
        }
    }

    private void CloseDiscountModal()
    {
        showDiscountRemark = false;
        discountReason = "";
    }

    private void ConfirmDiscount()
    {
        if (string.IsNullOrWhiteSpace(discountReason))
        {
            _ = JS.InvokeVoidAsync("alert", "Discount remark mandatory");
            return;
        }
        showDiscountRemark = false;
        showConfirm = true;
    }

    private async Task GenBill()
    {
        try
        {
            isGenerating = true;
            showConfirm = false;
            StateHasChanged();

            var orderResponse = await Http.GetAsync($"api/CSATSU_RMS_RKOT_SUM/{tableNumber}");
            if (!orderResponse.IsSuccessStatusCode)
            {
                var msg = await orderResponse.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("alert", msg);
                return;
            }
            var orderDetail = await orderResponse.Content.ReadFromJsonAsync<List<PfbRkotSumDto>>();
            if (orderDetail == null || orderDetail.Count == 0)
            {
                await JS.InvokeVoidAsync("alert", "No order found or bill already generated.");
                return;
            }

            // 1) Build tax accumulators for current items
            var acc = await BuildTaxDetailsAsync(itemData ?? Enumerable.Empty<PfbRkotTrnDto>());

            // 2) Build API tax lists (using existing shared models with string amounts)
            var lists = BuildApiListsFromAccumulators(acc);

            // 3) Compose order data per shared model
            var pos = await GetPosCode();
            var orderData = new OrderDataDto
            {
                RBIL_TAXFREE = lists.RBIL_TAXFREE ? "y" : "n",
                Tbl = tableNumber,
                pos = pos,
                cvr = orderDetail.FirstOrDefault()?.RsumCvr.ToString() ?? "",
                Stw = orderDetail.FirstOrDefault()?.RsumStw ?? "",
                Amount = (int)orderDetail.Sum(o => o.RsumAmt ?? 0),
                TotalTax = (float)(itemData?.Sum(o => (o.RkotTax ?? 0)) ?? 0),

                // Aggregated group totals into header floats
                RBIL_TAMT = lists.RBIL_TAMT_TOTAL,
                RBIL_TOTAL = lists.RBIL_TOTAL_TOTAL,
                RBIL_STX = lists.RBIL_STX_TOTAL,
                RBIL_OTX = lists.RBIL_OTX_TOTAL,
                RBIL_DC1 = lists.RBIL_DC1_TOTAL,
                RBIL_CVCHR2 = lists.RBIL_CVCHR2_TOTAL,
                RBIL_ROUND = lists.RBIL_ROUND_TOTAL,
                RBIL_TaxableDisc = lists.RBIL_TaxableDisc_TOTAL,

                run_date = DateTime.Now.ToString("yyyy-MM-dd"),
                odrem = "Bill generation from handheld",
                odtype = "N",
                G_Code = "G001",
                G_Name = "Guest",
                flag = "F",
                token = "",

                TaxStructure = lists.TaxStructure,
                TaxStructure2 = lists.TaxStructure2,
                TaxStructureGroupWise = lists.TaxStructureGroupWise,

                RKOT_TRN_DATA = (itemData ?? new()).Select(o => new RKOT_TRN_DATA
                {
                    RKOT_NO = o.RkotNo ?? "",
                    ItemCode = o.RkotMnu ?? "",
                    DiscountPer = o.RkotDisc?.ToString() ?? "0",
                    RKOT_SNO = o.RkotSno?.ToString() ?? "0"
                }).ToList(),

                ItemCode = new(),
                StrQty = new(),
                ItemRemark = new(),
                strAddon = new(),
                strModi = new(),
                strCombo = new(),
                strHappy = new(),
                strdisc = new(),
                sub_item = new(),
                cover_item = new(),
                meal_item = new(),
            };

            var response = await Http.PostAsJsonAsync("api/CSATSU_RMS_FinallBillGenerator", orderData);
            if (response.IsSuccessStatusCode)
            {
                var billNo = await response.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("alert", $"Bill generated successfully! Bill No: {billNo}");
                Navigation.NavigateTo($"/finalbill?TableNo={tableNumber}");
            }
            else
            {
                var msg = await response.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("alert", $"Failed to generate bill.\n{msg}");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
        finally
        {
            isGenerating = false;
            StateHasChanged();
        }
    }

    private async Task<string> GetPosCode() => "001"; // stub

    // ================== TAX LOGIC (internal types only; payload uses shared models) ==================

    private sealed class TaxAccumulators
    {
        public Dictionary<string, TaxEditDetailEntry> PerTax { get; } = new(StringComparer.OrdinalIgnoreCase);
        public Dictionary<string, Dictionary<string, GroupTaxEntry>> GroupBySerial { get; } = new(StringComparer.OrdinalIgnoreCase);
        public Dictionary<string, GroupEnvelopeTotals> GroupEnvelopes { get; } = new(StringComparer.OrdinalIgnoreCase);
        public void EnsureSerial(string serial)
        {
            if (!GroupBySerial.ContainsKey(serial))
                GroupBySerial[serial] = new(StringComparer.OrdinalIgnoreCase);
            if (!GroupEnvelopes.ContainsKey(serial))
                GroupEnvelopes[serial] = new GroupEnvelopeTotals();
        }
    }

    private sealed class TaxRuleDto
    {
        public string TaxableNonTaxable { get; set; } = "";
        public decimal BASE { get; set; }
        public decimal Factor { get; set; }
        public string TaxOn { get; set; } = "";
        public string TaxType { get; set; } = ""; // "E" => OTX, else STX
        public string TaxCode { get; set; } = "";
        public string TaxName { get; set; } = "";
        public bool Editable { get; set; }
        public int TaxSrNo { get; set; }
        public int TaxNo { get; set; }
    }

    private sealed class TaxEditDetailEntry
    {
        public string TaxName { get; set; } = "";
        public decimal TaxableAmount { get; set; }
        public decimal TaxPer { get; set; }
        public decimal TotalTax { get; set; }
        public bool Checked { get; set; } = true;
        public bool Editable { get; set; }
        public decimal TTWSC { get; set; }
        public int TaxSerialNo { get; set; }
        public int TaxApplyedOn { get; set; }
        public string TaxOn { get; set; } = "";
        public decimal Tax_print { get; set; }
        public string TaxType { get; set; } = "";
    }

    private sealed class GroupTaxEntry
    {
        public string TaxName { get; set; } = "";
        public decimal TaxableAmount { get; set; }
        public decimal TaxPer { get; set; }
        public bool Checked { get; set; } = true;
        public bool Editable { get; set; }
        public decimal TTWSC { get; set; }
        public int TaxSerialNo { get; set; }
        public int TaxApplyedOn { get; set; }
        public string TaxOn { get; set; } = "";
        public decimal Tax_print { get; set; }
        public decimal TotalAmtCal { get; set; }
        public decimal TotalSC { get; set; }     // STX bucket
        public decimal TotalTax { get; set; }
        public decimal Otrcharge { get; set; }   // OTX bucket
        public decimal GrpDiscount { get; set; }
        public string TaxType { get; set; } = "";
    }

    private sealed class GroupEnvelopeTotals
    {
        public decimal RBill_TAMT { get; set; }
        public decimal RBill_NAMT { get; set; }
        public decimal GRP_AMT { get; set; }
    }

    private async Task<List<TaxRuleDto>> GetBillTaxAsync(string gstName)
    {
        if (string.IsNullOrWhiteSpace(gstName)) return new();
        if (_taxRuleCache.TryGetValue(gstName, out var cached)) return cached;

        var resp = await Http.GetAsync($"api/GetBillTax/{Uri.EscapeDataString(gstName)}");
        resp.EnsureSuccessStatusCode();
        var rules = await resp.Content.ReadFromJsonAsync<List<TaxRuleDto>>() ?? new();
        _taxRuleCache[gstName] = rules;
        return rules;
    }

    private void UpsertPerTax(Dictionary<string, TaxEditDetailEntry> perTax, TaxRuleDto rule, decimal taxableAdd, decimal taxAdd)
    {
        if (!perTax.TryGetValue(rule.TaxCode, out var entry))
        {
            entry = new TaxEditDetailEntry
            {
                TaxName = rule.TaxName,
                TaxPer = rule.Factor,
                Editable = rule.Editable,
                TaxSerialNo = rule.TaxSrNo,
                TaxApplyedOn = rule.TaxNo,
                TaxOn = rule.TaxOn,
                TaxType = rule.TaxType,
                Checked = true
            };
            perTax[rule.TaxCode] = entry;
        }
        entry.TaxableAmount += taxableAdd;
        entry.TotalTax += taxAdd;
        entry.Tax_print = entry.TotalTax;
    }

    // Envelope updates removed; only per-tax accumulation here
    private void UpsertGroupTax(
        Dictionary<string, Dictionary<string, GroupTaxEntry>> bySerial,
        string serial, TaxRuleDto rule,
        decimal itemRate, decimal taxableAdd, decimal taxAdd,
        decimal serviceChargeAdd, decimal otherChargeAdd,
        decimal grpDiscountAdd)
    {
        if (!bySerial[serial].TryGetValue(rule.TaxCode, out var gt))
        {
            gt = new GroupTaxEntry
            {
                TaxName = rule.TaxName,
                TaxPer = rule.Factor,
                Editable = rule.Editable,
                TaxSerialNo = rule.TaxSrNo,
                TaxApplyedOn = rule.TaxNo,
                TaxOn = rule.TaxOn,
                TaxType = rule.TaxType,
                Checked = true
            };
            bySerial[serial][rule.TaxCode] = gt;
        }
        gt.TaxableAmount += taxableAdd;
        gt.TotalTax += taxAdd;
        gt.Tax_print += taxAdd;
        gt.TotalSC += serviceChargeAdd;   // STX
        gt.Otrcharge += otherChargeAdd;  // OTX
        gt.TotalAmtCal += itemRate;
        gt.GrpDiscount += grpDiscountAdd;
    }

    private async Task<TaxAccumulators> BuildTaxDetailsAsync(IEnumerable<PfbRkotTrnDto> items)
    {
        var acc = new TaxAccumulators();
        foreach (var it in items)
        {
            var qty = Convert.ToDecimal(it.RkotQty ?? 0);
            var rate = Convert.ToDecimal(it.RkotRat ?? 0);
            var gstName = (it.RkotStax ?? "").Trim();
            // var gstName = (it.RkotStax ?? it.RkotSTaxName ?? "").Trim();
            var serial = it.SerialNoStartWith ?? "DEFAULT";
            // var serial = it.SerialNoStartWith ?? it.SeriesFlag ?? "DEFAULT";
            var itemRate = rate * qty;

            if (qty <= 0 || rate < 0) continue;

            acc.EnsureSerial(serial);

            // Per-item base numbers
            var discountPer = Convert.ToDecimal(it.RkotDisc ?? 0);
            var curHHDiscount = (rate * qty * discountPer) / 100m;
            var calculatedRateBase = rate * qty;
            var calculatedRateAfterDisc = calculatedRateBase - curHHDiscount;

            // Fetch rules once per item
            var rules = await GetBillTaxAsync(gstName);

            // Envelope totals once per item (legacy behavior)
            {
                var env = acc.GroupEnvelopes[serial];
                if (rules.Count > 0)
                {
                    var first = rules[0];
                    if (string.Equals(first.TaxableNonTaxable, "N", StringComparison.OrdinalIgnoreCase))
                        env.RBill_NAMT += calculatedRateAfterDisc;
                    else
                        env.RBill_TAMT += calculatedRateAfterDisc;
                }
                else
                {
                    // No rules => treat as non-taxable amount
                    env.RBill_NAMT += calculatedRateAfterDisc;
                }
                // Group base uses pre-discount sum as in legacy GRP_AMT
                env.GRP_AMT += calculatedRateBase;
            }

            // Taxes per rule
            foreach (var rule in rules)
            {
                if (string.Equals(rule.TaxOn, "Disc", StringComparison.OrdinalIgnoreCase))
                {
                    var taxableAmt = calculatedRateAfterDisc;
                    var presentTax = (taxableAmt * rule.Factor) / 100m;
                    var serviceCharge = rule.TaxType == "E" ? 0m : presentTax;
                    var otherCharge = rule.TaxType == "E" ? presentTax : 0m;

                    UpsertPerTax(acc.PerTax, rule, taxableAmt, presentTax);
                    UpsertGroupTax(acc.GroupBySerial, serial, rule,
                                   itemRate, taxableAmt, presentTax,
                                   serviceCharge, otherCharge, curHHDiscount);
                }
                else if (string.Equals(rule.TaxOn, "Tax", StringComparison.OrdinalIgnoreCase))
                {
                    var refRule = rules.FirstOrDefault(r => r.TaxSrNo == rule.TaxNo);
                    var addTaxNoValue = refRule is null ? 0m : (calculatedRateAfterDisc * refRule.Factor) / 100m;
                    var taxOnDiscForTaxableAmount = ((calculatedRateAfterDisc * rule.BASE) / 100m) + addTaxNoValue;
                    var presentTax = (taxOnDiscForTaxableAmount * rule.Factor) / 100m;
                    var serviceCharge = rule.TaxType == "E" ? 0m : presentTax;
                    var otherCharge = rule.TaxType == "E" ? presentTax : 0m;

                    UpsertPerTax(acc.PerTax, rule, taxOnDiscForTaxableAmount, presentTax);
                    UpsertGroupTax(acc.GroupBySerial, serial, rule,
                                   itemRate, taxOnDiscForTaxableAmount, presentTax,
                                   serviceCharge, otherCharge, curHHDiscount);
                }
                else
                {
                    // Default: pre-discount base
                    var taxableAmt = calculatedRateBase;
                    var presentTax = (taxableAmt * rule.Factor) / 100m;
                    var serviceCharge = rule.TaxType == "E" ? 0m : presentTax;
                    var otherCharge = rule.TaxType == "E" ? presentTax : 0m;

                    UpsertPerTax(acc.PerTax, rule, taxableAmt, presentTax);
                    UpsertGroupTax(acc.GroupBySerial, serial, rule,
                                   itemRate, taxableAmt, presentTax,
                                   serviceCharge, otherCharge, curHHDiscount);
                }
            }
        }
        return acc;
    }

    private sealed class TaxListsResult
    {
        public List<TaxStructure> TaxStructure { get; } = new();
        public List<TaxStructure2> TaxStructure2 { get; } = new();
        public List<TaxStructureGroupWise> TaxStructureGroupWise { get; } = new();
        public bool RBIL_TAXFREE { get; set; }

        // Aggregates for OrderDataDto header floats
        public float RBIL_TAMT_TOTAL { get; set; }
        public float RBIL_TOTAL_TOTAL { get; set; }
        public float RBIL_STX_TOTAL { get; set; }
        public float RBIL_OTX_TOTAL { get; set; }
        public float RBIL_DC1_TOTAL { get; set; }
        public float RBIL_CVCHR2_TOTAL { get; set; }
        public float RBIL_ROUND_TOTAL { get; set; }
        public float RBIL_TaxableDisc_TOTAL { get; set; }
    }

    private static string Fmt(decimal d) => d.ToString("0.00", CultureInfo.InvariantCulture);

    private TaxListsResult BuildApiListsFromAccumulators(TaxAccumulators acc)
    {
        var result = new TaxListsResult();

        // TaxStructure from per-tax
        bool anyChecked = false;
        foreach (var (code, entry) in acc.PerTax)
        {
            if (!entry.Checked) continue;
            anyChecked = true;

            result.TaxStructure.Add(new TaxStructure
            {
                RTax_TCode = code,
                RTax_OnAmt = Fmt(entry.TaxableAmount),
                RTax_TaxAmt = Fmt(entry.Tax_print)
            });
        }
        result.RBIL_TAXFREE = !anyChecked;

        // TaxStructure2 and GroupWise; also compute header aggregates
        decimal agg_tamt = 0, agg_namt = 0, agg_grpstx = 0, agg_grpotx = 0, agg_dc1 = 0, agg_cvchr2 = 0, agg_round = 0, agg_taxableDisc = 0, agg_total = 0;

        foreach (var (serial, map) in acc.GroupBySerial)
        {
            decimal rbil_stx = 0, rbil_otx = 0, totalTaxCal = 0, totalDiscount = 0, rtax_onAmt = 0, rtax_taxAmt = 0;
            string lastTaxCode = "";

            foreach (var (code, g) in map)
            {
                if (!g.Checked) continue;
                lastTaxCode = code;

                var rtaxOnAmt = Math.Round(g.TaxableAmount, 2);
                var stx = Math.Round(g.TotalSC, 2);
                var otx = Math.Round(g.Otrcharge, 2);
                var taxAmtForRow = g.TaxType == "E" ? otx : stx;

                result.TaxStructure2.Add(new TaxStructure2
                {
                    seriesFlag = serial,
                    RTax_TCode = code,
                    RTax_OnAmt = Fmt(rtaxOnAmt),
                    RTax_TaxAmt = Fmt(taxAmtForRow),
                    RTax_TaxTyp = g.TaxType,
                    TotalTax = (float)Math.Round(g.TotalTax, 2),
                    Otrcharge = (float)otx,
                    TotalSC = (float)stx
                });

                totalTaxCal += stx + otx;
                totalDiscount += Math.Round(g.GrpDiscount, 2);
                rbil_stx += stx;
                rbil_otx += otx;
                rtax_onAmt += rtaxOnAmt;
                rtax_taxAmt += Math.Round(g.Tax_print, 2);
            }

            var env = acc.GroupEnvelopes[serial];
            var rbil_tamt = env.RBill_TAMT;
            var rbil_namt = env.RBill_NAMT;
            var grp_amt = env.GRP_AMT;

            var rbil_cvchr2 = grp_amt + totalTaxCal - totalDiscount;
            var rbil_round = Math.Round(rbil_cvchr2, MidpointRounding.AwayFromZero);
            var rbil_taxableDisc = Math.Round(totalTaxCal, 2);
            var rbil_total = rbil_cvchr2;

            result.TaxStructureGroupWise.Add(new TaxStructureGroupWise
            {
                seriesFlag = serial,
                RTax_TCode = lastTaxCode,
                RTax_OnAmt = Fmt(rtax_onAmt),
                RTax_TaxAmt = Fmt(rtax_taxAmt),
                RBIL_TAMT = Fmt(rbil_tamt),
                RBIL_NAMT = Fmt(rbil_namt),
                RBIL_STX = Fmt(rbil_stx),
                RBIL_OTX = Fmt(rbil_otx),
                RBIL_DC1 = Fmt(totalDiscount),
                RBIL_CVCHR2 = Fmt(rbil_cvchr2),
                RBIL_ROUND = Fmt(rbil_round),
                RBIL_TaxableDisc = Fmt(rbil_taxableDisc),
                RBIL_TOTAL = Fmt(rbil_total)
            });

            // Aggregate for OrderDataDto header floats
            agg_tamt += rbil_tamt;
            agg_namt += rbil_namt; // not exposed in header but kept if needed
            agg_grpstx += rbil_stx;
            agg_grpotx += rbil_otx;
            agg_dc1 += totalDiscount;
            agg_cvchr2 += rbil_cvchr2;
            agg_round += rbil_round;
            agg_taxableDisc += rbil_taxableDisc;
            agg_total += rbil_total;
        }

        // Header totals
        result.RBIL_TAMT_TOTAL = (float)Math.Round(agg_tamt, 2);
        result.RBIL_STX_TOTAL = (float)Math.Round(agg_grpstx, 2);
        result.RBIL_OTX_TOTAL = (float)Math.Round(agg_grpotx, 2);
        result.RBIL_DC1_TOTAL = (float)Math.Round(agg_dc1, 2);
        result.RBIL_CVCHR2_TOTAL = (float)Math.Round(agg_cvchr2, 2);
        result.RBIL_ROUND_TOTAL = (float)Math.Round(agg_round, 2);
        result.RBIL_TaxableDisc_TOTAL = (float)Math.Round(agg_taxableDisc, 2);
        result.RBIL_TOTAL_TOTAL = (float)Math.Round(agg_total, 2);

        return result;
    }
}




<style scoped>
    /* Test Charges Section with Grid */
    .test-charges {
        background: #fff;
        padding: 20px;
        border-radius: 10px;
        margin-top: 20px;
        margin-bottom: 20px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.05);
        display: grid;
        grid-template-columns: 2.5fr 1fr; /* Left bigger, right smaller */
        /* grid-template-columns: 1.5fr 1fr; */
        gap: 20px;
        width: 100%;    
    }

    /* Left (Checkboxes) */
    .charges-left {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }


        .charges-left label {
            font-size: 14px;
            display: flex;
            align-items: center;
            gap: 6px;
        }

    /* Right (Summary in 2-column format) */
    .charges-summary {
        background: #f9fafb;
        padding: 14px 18px;
        border-radius: 8px;
        font-size: 15px;
        box-shadow: inset 0 1px 4px rgba(0,0,0,0.05);
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

    .summary-row {
        display: flex;
        justify-content: space-between; /* label left, value right */
        font-weight: 500;
    }

        .summary-row.total {
            font-weight: 700;
            font-size: 16px;
            border-top: 1px solid #eee;
            padding-top: 8px;
        }

        .charges-summary p {
            margin: 6px 0;
        }

/* Page Layout */
.bill-page {
    width: 100%;
    min-height: 150vh;
    /* background: #f9fafb; */
    padding: 20px;
    font-family: 'Segoe UI', sans-serif;
    color: #333;
}

/* Header */
.bill-header {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
    background: #2563eb;
    color: #fff;
    padding: 14px 20px;
    border-radius: 10px;
    margin-bottom: 20px;
    font-size: 15px;
}

/* Orders Table */
.order-table {
    display: grid;
    grid-template-columns: 1fr 2.3fr 0.7fr 0.7fr 0.4fr;
    /* grid-template-columns: 1fr 2fr 0.6fr 0.7fr 0.8fr; */
    font-size: 14px;
    background: #fff;
    border-radius: 10px;
    overflow: hidden;
    box-shadow: 0 2px 8px rgba(0,0,0,0.05);
}
.order-row {
    display: contents;
}
.order-row > div {
    padding: 12px;
    border-bottom: 1px solid #eee;
}
.order-row.header > div {
    background: #f1f5f9;
    font-weight: bold;
    border-bottom: 2px solid #ddd;
}

/* Summary */
.bill-summary {
    display: flex;
    justify-content: space-between;
    margin: 20px 0;
    padding: 16px 20px;
    background: #fff;
    border-radius: 10px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.05);
    font-size: 15px;
}

.test-charges label {
    font-size: 14px;
    display: flex;
    align-items: center;
    gap: 6px;
}
.test-charges .custom-charge input[type="number"] {
    width: 60px;
    padding: 4px 6px;
    border: 1px solid #ccc;
    border-radius: 6px;
}

/* Actions */
.bill-actions {
    display: flex;
    justify-content: flex-end;
    gap: 14px;
}
.primary-btn, .secondary-btn {
    padding: 12px 20px;
    border-radius: 8px;
    font-size: 14px;
    font-weight: 600;
    cursor: pointer;
    border: none;
    transition: all 0.2s ease;
}
.primary-btn {
    background: #2563eb;
    color: white;
}
.primary-btn:hover {
    background: #1e4fc3;
}
.secondary-btn {
    background: #f3f4f6;
    color: #333;
}
.secondary-btn:hover {
    /* background: #e5e7eb; */
    background: white;
}


    /* Overlay */
    .modal-overlay {
        position: fixed;
        inset: 0;
        background: rgba(0,0,0,0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }

    /* Modal Box */
    .modal-content {
        background: #fff;
        border-radius: 14px;
        padding: 24px 28px;
        width: 400px;
        max-width: 90%;
        box-shadow: 0 6px 18px rgba(0,0,0,0.2);
        animation: fadeInScale 0.25s ease;
        text-align: center;
    }

    /* Title & Text */
    .modal-title {
        font-size: 20px;
        font-weight: 700;
        margin-bottom: 14px;
        color: #111827;
    }

    .modal-text {
        font-size: 15px;
        color: #4b5563;
        margin-bottom: 20px;
    }

    /* Input */
    .modal-input {
        width: 100%;
        padding: 10px 12px;
        border: 1px solid #d1d5db;
        border-radius: 8px;
        font-size: 14px;
        margin-bottom: 18px;
    }

    /* Actions */
    .modal-actions {
        display: flex;
        justify-content: flex-end;
        gap: 12px;
    }

    .btn-cancel, .btn-confirm {
        padding: 10px 18px;
        border-radius: 8px;
        font-weight: 600;
        font-size: 14px;
        cursor: pointer;
        border: none;
        transition: background 0.2s ease;
    }

    .btn-cancel {
        background: #f3f4f6;
        color: #374151;
    }

        .btn-cancel:hover {
            background: #e5e7eb;
        }

    .btn-confirm {
        background: #2563eb;
        color: white;
    }

        .btn-confirm:hover {
            background: #1e4fc3;
        }

    /* Animation */
    @@keyframes fadeInScale {
        from

    {
        transform: scale(0.95);
        opacity: 0;
    }

    to {
        transform: scale(1);
        opacity: 1;
    }

    }
</style>


